{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Coding Knowledge Archive","text":"<p>This site is a general archive of useful coding information, resources, and documentation. It serves as a repository of knowledge on various programming topics, frameworks, and best practices.</p>"},{"location":"#whats-inside","title":"What's Inside","text":"<ul> <li> <p>Chickensoft Documentation: Documentation for the Chickensoft open source organization, focusing on tools and templates for the C# Godot community. Explore Chickensoft</p> </li> <li> <p>More Content Coming Soon: This archive is continually growing with new topics and resources.</p> </li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>This archive is open for contributions. If you have knowledge to share or want to fix errors, please consider contributing. See the README on GitHub for instructions on how to contribute.</p>"},{"location":"#archives","title":"Archives","text":""},{"location":"#chickensoft","title":"Chickensoft","text":"<p>Chickensoft is an open source organization dedicated to the C# Godot community, providing tools and templates to help developers create games and applications with Godot and C#.</p>"},{"location":"#license","title":"License","text":"<p>Unless otherwise noted, the content on this site is available under the MIT license. See the license page for more information.</p>"},{"location":"SUMMARY/","title":"Site Navigation","text":"<ul> <li>Home</li> <li>Chickensoft</li> <li>License</li> </ul>"},{"location":"license/","title":"License","text":""},{"location":"license/#chickensoft-content","title":"Chickensoft Content","text":"<p>All Chickensoft projects and associated documentation are licensed under the MIT License:</p> <pre><code>MIT License\n\nCopyright (c) 2022-present Chickensoft\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"license/#other-content","title":"Other Content","text":"<p>Unless otherwise specified, other content in this knowledge archive is also licensed under the MIT License. Individual articles or sections may have their own licensing terms, which will be clearly indicated where applicable.</p>"},{"location":"chickensoft/","title":"\ud83d\udc23 Chickensoft","text":""},{"location":"chickensoft/#about-chickensoft","title":"\ud83d\udc69\u200d\ud83c\udfeb About Chickensoft","text":"<p>Chickensoft is an open source organization dedicated to the C# Godot community. We host a Discord server dedicated to providing support for developers writing games, applications, and tools with Godot and C#.</p> <p>All Chickensoft projects are free to use for personal and commercial projects under the MIT license. See our license page for more information.</p>"},{"location":"chickensoft/#whats-here","title":"\ud83d\udcd6 What's here?","text":"<p>Chickensoft is home to a number of open source projects. Since some of these projects are quite involved, their documentation is hosted here. You can see all of Chickensoft's projects on the Chickensoft home page.</p> <p>In addition, we are striving to better document general C# and Godot development. Want to add notes about a particular topic? Feel free to contribute to the open source Chickensoft Website!</p>"},{"location":"chickensoft/#why-the-name","title":"\ud83d\udc24 Why the name?","text":"<p>Chickensoft began as a silly personal organization for my game development projects. While making games with Godot, I ended up creating a few utilities along the way to make C# development a bit easier. Now that the projects have a life of their own, I've given up trying to ever release a game. If for some reason I do release a commercial game, it will be under a different name. \ud83e\udd72</p>"},{"location":"chickensoft/#a-word-of-caution","title":"\ud83e\udea6 A Word of Caution","text":"<p>To all game developers I offer this word of caution: Don't make tools \u2014 make games. Otherwise, you will just end up writing documentation for tools that may (or may not) help others make games. <sup>At worst, you may fall into the dark pit that is writing an entire engine.</sup></p> <p>Unfortunately, \"not making tools\" and \"actually making games\" is a hard pill to swallow for game developers. Game development is notoriously hard, even without the temptation to write tools. When you finally do succeed in making a game, we'll be there to cheer you on in the community Discord server!</p> <p>If you still won't listen, feel free to contribute. Just know you are treading down a dark path full of unfinished projects and broken dreams. \ud83d\ude36\u200d\ud83c\udf2b\ufe0f</p>"},{"location":"chickensoft/SUMMARY/","title":"Chickensoft Documentation","text":"<ul> <li>Home</li> <li>Philosophy</li> <li>Setup</li> <li>Introspection</li> <li>How C# Works in Godot</li> <li>Logic Blocks</li> <li>Blog</li> </ul>"},{"location":"chickensoft/introspection/","title":"\ud83d\udd2e Introspection","text":"<p>Create mixins and generate metadata about types at build time to enable reflection in ahead-of-time (AOT) environments.</p> <p> </p>"},{"location":"chickensoft/introspection/#installation","title":"\ud83e\udd5a Installation","text":"<p>Find the latest version of the Introspection and Introspection Generator packages from nuget and add them to your C# project.</p> <p>[!WARNING] Introspection is compiled against the latest .NET 8 SDK. Because .NET 8 encompasses multiple versions of the .NET compiler, compiling your project against an older version of .NET 8 may generate a <code>CS9057</code> warning to indicate a compiler-version mismatch. However, if the warning is ignored, less-tractable downstream compilation errors, or even runtime errors, may result. Therefore, we strongly recommend treating <code>CS9057</code> as an error to catch compiler versioning issues at the earliest opportunity.</p> <pre><code>&lt;Project Sdk=...&gt;\n  &lt;PropertyGroup&gt;\n    &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;\n    ...\n    &lt;!-- Catch compiler-mismatch issues --&gt;\n    &lt;WarningsAsErrors&gt;CS9057&lt;/WarningsAsErrors&gt;\n    ...\n  &lt;/PropertyGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"Chickensoft.Introspection\" Version=... /&gt;\n    &lt;PackageReference Include=\"Chickensoft.Introspection.Generator\" Version=... PrivateAssets=\"all\" OutputItemType=\"analyzer\" /&gt;\n  &lt;/ItemGroup&gt;\n&lt;/Project&gt;\n</code></pre>"},{"location":"chickensoft/introspection/#background","title":"\ud83d\udcd9 Background","text":"<p>This is a metaprogramming tool that powers some of the other Chickensoft tools. Introspection exists to enable C# developers to get information about a type at runtime without needing reflection that wouldn't work or be guaranteed to work in all scenarios when compiling for ahead-of-time targets like iOS.</p> <p>The introspection package provides the following features:</p> <ul> <li>\u2705 Create a registry of all types visible from the global scope.</li> <li>\u2705 Generate metadata about visible types.</li> <li>\u2705 Track types by id and version.</li> <li>\u2705 Allow types to implement and look up mixins.</li> <li>\u2705 Compute and cache type hierarchies, attributes, and properties.</li> <li>\u2705 Track generic types of properties in a way that enables convenient serialization in AOT environments.</li> </ul> <p>You don't need to fully understand this package to make the most of it. In fact, you may never need to use it directly since you are more likely to encounter it as a dependency of one of the other Chickensoft tools:</p> <ul> <li>\ud83d\udcbe Serialization uses this tool to gather information about types at build-time to perform serialization and deserialization at runtime without having to resort to unsupported reflection techniques in AOT environments.</li> <li>\ud83d\udc89 AutoInject uses this tool to allow you to add mixins to classes at build-time and invoke their methods at runtime without reflection. It also leverages this to read attributes on types without having to use reflection.</li> <li>\ud83d\udca1 LogicBlocks uses this tool to look up possible states for a state machine so it can pre-allocate them at runtime without needing reflection.</li> </ul> <p>The introspection generator is designed to be performant as a project grows. The generator only uses syntax information to generate metadata, rather than relying on the C# analyzer's symbol data, which can be very slow.</p> <p>[!NOTE] This tool exists because many reflection-based API's don't work (or aren't guaranteed to work reliably in all scenarios) when compiling for AOT targets (like iOS). Chickensoft is striving to create packages that work in AOT environments like iOS, as mobile games and apps are extremely widespread. For more information, read our philosophy.</p>"},{"location":"chickensoft/introspection/#usage","title":"\ud83d\udcc4 Usage","text":""},{"location":"chickensoft/introspection/#introspective-types","title":"\ud83e\uddd8\u200d\u2640\ufe0f Introspective Types","text":"<p>Simply add the <code>[Meta]</code> attribute to a partial class or record that is visible from the global scope.</p> <pre><code>using Chickensoft.Introspection;\n\n[Meta]\npublic partial class MyType;\n\npublic partial class Container {\n  // Nested types are supported, too.\n  [Meta]\n  public partial class MyType;\n}\n</code></pre> <p>The generator will generate a type registry for your assembly that lists every type it can discover in the codebase, along with their generated metadata. Introspective types have much additional metadata compared to types without the <code>[Meta]</code> attribute.</p> <p>The generated registry automatically registers types with the Introspection library's type graph using a module initializer, so no action is needed on the developer's part. The module initializer registration process also performs some logic at runtime to resolve the type graph and cache the type hierarchy in a way that makes it performant to lookup. This preprocessing runs in roughly linear time and is negligible.</p> <p>All introspective types must be a class or record, partial, visible from the global scope. Introspective types cannot be generic.</p>"},{"location":"chickensoft/introspection/#identifiable-types","title":"\ud83e\udeaa Identifiable Types","text":"<p>An introspective type can also be an identifiable type if it is given the <code>[Id]</code> attribute. Identifiable types get additional metadata generated about them, allowing them to be looked up by their identifier.</p> <pre><code>  [Meta, Id(\"my_type\")]\n  public partial class MyType;\n</code></pre>"},{"location":"chickensoft/introspection/#the-type-graph","title":"\u2935\ufe0f The Type Graph","text":"<p>The type graph can be used to query information about types at runtime. If the type graph has to compute a query, the results are cached for all future queries. Most api's are simple O(1) lookups.</p> <pre><code>// Get every type that is a valid subtype of Ancestor.\nvar allSubtypes = Types.Graph.GetDescendantSubtypes(typeof(Ancestor));\n\n// Only get the types that directly inherit from Parent.\nvar subtypes = Types.Graph.GetSubtypes(typeof(Parent));\n\n// Get generated metadata associated with a type.\nif (Types.Graph.GetMetadata(typeof(Model)) is { } metadata) {\n  // ...\n}\n\n// Get properties, including those from parent introspective types.\nvar properties = Types.Graph.GetProperties(typeof(Model));\n\n// ...see the source for all possible type graph operations.\n</code></pre>"},{"location":"chickensoft/introspection/#versioning","title":"\ud83d\udc6f\u200d\u2640\ufe0f Versioning","text":"<p>All concrete introspective types have a simple integer version associated with them. By default, the version is <code>1</code>. You can use the <code>[Version]</code> attribute to denote the version of an introspective type.</p> <pre><code>[Meta, Version(2)]\npublic partial class MyType;\n\n// Or, multiple versions of the same identifiable type.\n\n[Meta, Id(\"my_type\")]\npublic abstract class MyType;\n\n[Meta, Version(1)]\npublic class MyType1 : MyType;\n\n[Meta, Version(2)]\npublic class MyType2 : MyType;\n\n[Meta, Version(3)]\npublic class MyType3 : MyType;\n</code></pre> <p>During type registration, the type graph will \"promote\" introspective types which inherit from an identifiable type to an identifiable type themselves, sharing the same identifier as their parent or ancestor identifiable type. Promoted identifiable types must, however, have uniquely specified versions.</p>"},{"location":"chickensoft/introspection/#metadata-types","title":"\ud83d\udd0e Metadata Types","text":"<p>The introspection generator differentiates between the following categories of types and constructs the appropriate metadata for the type, depending on which category it belongs to.</p> Category Metadata \ud83e\udee5 Abstract or generic types <code>TypeMetadata</code> \ud83e\udea8 Non-generic, concrete types <code>ConcreteTypeMetadata</code> \ud83d\udc7b Abstract introspective types <code>AbstractIntrospectiveTypeMetadata</code> \ud83d\uddff Concrete introspective types <code>IntrospectiveTypeMetadata</code> \ud83c\udd94 Abstract identifiable types <code>AbstractIdentifiableTypeMetadata</code> \ud83e\udeaa Concrete identifiable types <code>IdentifiableTypeMetadata</code> <p>You can check the type of metadata that a type has to understand what its capabilities are. Each type of metadata has different fields associated with it.</p> <p>In addition to the metadata classes, each metadata class implements the appropriate interfaces:</p> Metadata Conforms To <code>TypeMetadata</code> <code>ITypeMetadata</code> <code>ConcreteTypeMetadata</code> ..., <code>IClosedTypeMetadata</code>, <code>IConcreteMetadata</code> <code>IntrospectiveTypeMetadata</code> ..., <code>IConcreteIntrospectiveTypeMetadata</code> <code>IdentifiableTypeMetadata</code> ..., <code>IIdentifiableTypeMetadata</code> ... etc. <pre><code>public class MyTypeReceiver : ITypeReceiver {\n  public void Receive&lt;T&gt;() {\n    // Do whatever you want with the type as a generic parameter.\n  }\n}\n\nvar metadata = Types.Graph.GetMetadata(typeof(Model));\n\nif (metadata is IClosedTypeMetadata closedMetadata) {\n  // Closed types allow you to receive the type as a generic argument in\n  // a TypeReceiver's Receive&lt;T&gt;() method.\n  closedMetadata.GenericTypeGetter(new MyTypeReceiver())\n}\n\nif (metadata is IConcreteTypeMetadata concreteMetadata) {\n  // Concrete types allow you to create a new instance of the type, if\n  // it has a parameterless constructor.\n  var instance = concreteMetadata.Factory();\n}\n\nif (metadata is IIntrospectiveTypeMetadata introMetadata) {\n  // Introspective types provide a metatype instance which allows you to access\n  // more information about that type, such as its properties and attributes.\n  var metatype = introMetadata.Metatype;\n}\n\nif (metadata is IConcreteIntrospectiveTypeMetadata concreteIntroMetadata) {\n  // Concrete introspective types have a version number.\n  var version = concreteIntroMetadata.Version;\n}\n\nif (metadata is IIdentifiableTypeMetadata idMetadata) {\n  // Identifiable types have an id.\n  var id = idMetadata.Id;\n}\n</code></pre>"},{"location":"chickensoft/introspection/#metatypes","title":"\u0394 Metatypes","text":"<p>The introspection generator generates additional metadata for introspective and identifiable types known as a \"metatype.\" A type's metatype information can be accessed from its metadata.</p> <pre><code>var metadata = Types.Graph.GetMetadata(typeof(Model));\n\nif (metadata is IIntrospectiveTypeMetadata introMetadata) {\n  var metatype = introMetadata.Metatype;\n\n  foreach (var attribute in metatype.Attributes) {\n    // Iterate the attributes on an introspective type.\n  }\n\n  foreach (var property in metatype.Properties) {\n    // Iterate the properties of an introspective type.\n    if (property.Setter is { } setter) {\n      // We can set the value of the property.\n      setter(obj, value);\n    }\n\n    // etc.\n  }\n}\n</code></pre> <p>Metatype data provides information about a specific type, its properties, and attributes. The type graph combines metatype information with its understanding of the type hierarchy to enable you to fetch all properties of an introspective type, including those it inherited from other introspective types. Metatypes will only contain information about the type itself, not anything it inherits from.</p> <p>To see all of the information that a metatype exposes, please see the Metatype interface definition.</p>"},{"location":"chickensoft/introspection/#mixins","title":"\ud83c\udf9b\ufe0f Mixins","text":"<p>The introspection generator allows you to create mixins to add additional functionality to the type they are applied to. Unlike default interface method implementations, mixins are able to add instance state via a blackboard. Every introspective type has a <code>MixinState</code> blackboard which allows mixins to add instance data to the type they are applied to.</p> <p>Additionally, mixins must implement a single handler method. An introspective type's <code>Metatype</code> has a <code>Mixins</code> property containing a list of mixin types that were applied to it. Additionally, a <code>MixinHandler</code> table is provided which maps the mixin type to a closure which invokes the mixin's handler.</p> <p>Introspective type instances can also cast themselves to <code>IIntrospective</code> to invoke a given mixin easily.</p> <pre><code>// Declare a mixin\n[Mixin]\npublic interface IMyMixin : IMixin&lt;IMyMixin&gt; {\n  void IMixin&lt;IMyMixin&gt;.Handler() { }\n}\n\n// Use a mixin\n[Meta(typeof(Mixin))]\npublic partial class MyModel {\n\n  // Use mixins\n  public void MyMethod() {\n    // Call all applied mixin handlers\n    (this as IIntrospective).InvokeMixins();\n\n    // Call a specific mixin handler\n    (this as IIntrospective).InvokeMixin(typeof(IMyMixin));\n  }\n}\n</code></pre> <p>\ud83d\udc23 Package generated from a \ud83d\udc24 Chickensoft Template \u2014 https://chickensoft.games</p>"},{"location":"chickensoft/philosophy/","title":"\ud83c\udfdb\ufe0f Philosophy","text":""},{"location":"chickensoft/philosophy/#purpose","title":"Purpose","text":"<p>Chickensoft is an open source organization that exists to empower small-to-midsize indie game developers and studios. We believe game architecture is largely a solved problem for most midsize games.</p> <p>Ideally, game developers should be free to focus on implementing interesting game logic instead of being forced to rediscover decades worth of knowledge surrounding software architecture. As an organization, Chickensoft offers strong opinions about how games can be architected and provides the tools to implement those opinions.</p> <p>Many people have pointed out that our code looks a lot different from other C# projects. We aren't intentionally deviating from the norms \u2014 our code is inspired from a variety of sources, including the code for the C# compiler itself. To explain why we do what we do, we\u2019ve outlined the principles that inform our strong opinions about software architecture and game development.</p> <p>:::tip Looking for something less theoretical? Check out our technical how-to guide, Enjoyable Game Architecture. ::: Chickensoft believes general purpose tools to construct quality software should always be open source. Chickensoft\u2019s tools are built for the world\u2019s most popular open source game engine, Godot, and are licensed under the permissive MIT License. We write our tools in one of the world\u2019s most popular programming languages, C#, which has been open source since 2014. Godot provides first party support for C# and consistently ranks in the top 100 most starred GitHub projects of all time.</p>"},{"location":"chickensoft/philosophy/#why-use-c-with-godot","title":"Why use C# with Godot?","text":"<p>We believe code quality and developer happiness are core determiners of whether or not a project will be successfully completed on time. As a language, C# allows small teams to produce performant, well organized code, and is one of the most loved programming languages of all time.</p> <p>C# has an extensive ecosystem of enterprise-grade libraries and tooling available, and is frequently used to implement everything from simple console programs to complex, distributed systems.</p>"},{"location":"chickensoft/philosophy/#dog-fooding","title":"Dog-fooding","text":"<p>Contrary to popular belief, we do not make tools for fun. We only develop a tool if we run into a real-life use case and determine that making a tool would benefit most other\u00a0midsize game development projects (i.e., we eat our own dog food).</p> <p>We build each tool with the intention of immediately using and trying it out in a real game project. To this end, we maintain a fully tested, 3D platformer game demo that leverages the Chickensoft tools and demonstrates our architectural practices. Only developing tools that we have an immediate need for prevents us from solving unnecessary problems and ensures the quality of our tools. Nothing identifies design flaws and bugs in a tool like using it in a real, production environment with non-trivial use cases.</p>"},{"location":"chickensoft/philosophy/#our-technical-point-of-view","title":"Our Technical Point of View","text":"<p>We believe game code can be...</p> <ul> <li>\ud83c\udfce\ufe0f Fast</li> <li>\ud83e\uddd8\u200d\u2640\ufe0f Flexible</li> <li>\ud83c\udfed Consistent</li> <li>\ud83e\uddea Testable</li> <li>\ud83d\udcf1 Cross-platform</li> <li>\ud83e\udd5a Minimal</li> <li>\ud83d\udc69\u200d\ud83d\udcbb Hackable</li> <li>\ud83e\udea2 Loosely Coupled</li> </ul> <p>We've spent the last several years building tools to support software architecture patterns that exist to promote those goals. While no patterns are perfect, we feel pretty confident we've come up with a good foundation that we can build on for years to come.</p>"},{"location":"chickensoft/philosophy/#fast","title":"\ud83c\udfce\ufe0f Fast","text":"<p>Chickensoft prefers optimized source generation over reflection. Production dependencies only use \u201creflection\u201d that is supported in C#\u2019s reflection-free mode, ensuring future compatibility on platforms that require ahead-of-time compilation, like iOS.</p> <p>To prevent C# garbage collector pauses, production dependencies avoid memory allocations during critical game loop paths. Each package strives to use data structures with the correct time complexity or benchmarked performance needed to best solve the job at hand. Time complexity is sometimes irrelevant for differing amounts of data, so benchmarking data structures based on real-world use cases is preferred for performance-critical data.</p>"},{"location":"chickensoft/philosophy/#flexible","title":"\ud83e\uddd8\u200d\u2640\ufe0f Flexible","text":"<p>All Chickensoft projects exist to serve the classic game development idea of \u201cfinding the fun.\u201d Since most game development projects fail because of execution, the Chickensoft tools are designed to guarantee the execution of scalable, well-structured code throughout the entire development lifecycle. Traditionally, the cost of adding a feature increases over time as the code becomes messier. Chickensoft\u2019s game architecture and tooling exist to flatten that cost as time goes on. Chickensoft\u2019s opinions are based on proven practices and successes from other cross-platform frameworks that resemble Godot behind-the-scenes, as well as the advice of many top engineers who contributed to those ecosystems.</p>"},{"location":"chickensoft/philosophy/#consistent","title":"\ud83c\udfed Consistent","text":"<p>Chickensoft leverages the concept of feature-based project structure to ensure that game code can be properly tokenized (see \"Thinking in Tokens\" in Chapter 17 [page 482] of Game Architecture and Design: A New Edition). Keeping all non-shared elements of a feature in one directory enables features to be more easily copied into other projects, as well as standardizes where developers need to look to understand any given piece of the game. Ease of copying features between projects should not be underestimated, either, as it allows developers to quickly try things out in a sandbox project and move them into a more mature project, or reorganize larger projects without consequence.</p> <p>When everything is structured consistently, developers can more easily understand parts of the codebase that they themselves did not author. Similarity helps reduce developer ramp up time between features (and even entire game projects), drastically reducing costs. Feature based architecture is also an easy idea to understand, making it that much simpler for developers to teach to the new hires or junior engineers on their team.</p> <p>Self contained code is also easier to mock (or fake) when leveraging automated tests. Well structured code is relatively cheap to test.</p>"},{"location":"chickensoft/philosophy/#testable","title":"\ud83e\uddea Testable","text":"<p>As projects become more advanced, the importance of unit testing auxiliary tools or core game systems becomes more important. In addition, automated integration tests that simulate input can provide tremendous value for games and drastically reduce the burden on manual QA testers by preventing bug regressions. Better yet, your QA team can be freed up to help write automated tests, ensuring an infinite return on a mostly-flat development cost.</p>"},{"location":"chickensoft/philosophy/#cross-platform","title":"\ud83d\udcf1 Cross-platform","text":"<p>Chickensoft\u2019s command line and CI/CD tools are designed to work on the three major desktop operating systems: Windows, macOS, and Linux. Production game dependencies are also designed to work on the three major desktop platforms, as well as iOS and Android. While cross-platform support creates an additional workload for us, we believe the added effort is worth it to ensure that developers can market their products across as many platforms as possible.</p>"},{"location":"chickensoft/philosophy/#minimal","title":"\ud83e\udd5a Minimal","text":"<p>Each Chickensoft project is striving to have as little code as is necessary to perform its function in a readable, maintainable manner that adheres to the principles outlined here. Because it\u2019s hard to design elegant systems up front, we often streamline and remove unnecessary code as projects mature, constantly iterating towards these goals wherever we can.</p> <p>Wherever possible, we look for ways to solve big, real-life problems with the fewest points of failure. It\u2019s not a perfect process, but we are continually on the hunt to find better ways to simplify things and improve reliability while decreasing the risk of defects. Simple code is easier to use, too.</p>"},{"location":"chickensoft/philosophy/#hackable","title":"\ud83d\udc69\u200d\ud83d\udcbb Hackable","text":"<p>Chickensoft projects expose public API\u2019s that are not always mentioned in our tutorials or readme\u2019s. While we don\u2019t advise you to build core systems around these API\u2019s, it can come in handy in a pinch. We believe developers should have the freedom they need to get stuff done, even if it means making our tools do things that make us squirm. Many times, features are added or improved because of community members informing us about unexpected use cases that end up being extremely useful.</p>"},{"location":"chickensoft/philosophy/#loosely-coupled","title":"\ud83e\udea2 Loosely Coupled","text":"<p>Game-engine specific packages are designed to avoid touching the game engine as much as possible. Fewer calls into the engine makes it easier to keep packages up-to-date and reduces marshaling costs between C#\u2019s managed environment and Godot\u2019s native environment. Leveraging vanilla C# wherever possible reduces the learning curve for developers with previous C# experience and allows us to take advantage of the language\u2019s incredible abilities, such as record types and events.</p> <p>Because Godot has a fairly rapid release cycle, keeping packages updated allows our projects to be used with the latest versions of Godot and enables us to integrate upcoming changes or fixes almost as soon as new versions of Godot are released. For non-breaking changes, most of our package releases have been automated, ensuring that our packages are available whenever Godot is updated.</p>"},{"location":"chickensoft/setup/","title":"\ud83c\udfc1 Godot C# Setup Guide","text":"<p>If you have the .NET SDK installed, Godot 4 provides a pretty good out-of-the-box development experience \u2014 but you'll need to follow some additional steps if you want to configure your environment to simplify IDE integration and command-line usage.</p> <p>Ready to make games with Godot and C#? Let's start by making sure your development environment is ready to go!</p> <p>If you get stuck on a step or want to inform us about incorrect or outdated documentation, please join us on Discord.</p> <p>:::tip This guide is specific to Godot 4 \u2014 all Chickensoft packages have officially migrated to Godot 4. :::</p>"},{"location":"chickensoft/setup/#installing-the-net-sdk","title":"\ud83d\udce6 Installing the .NET SDK","text":"<p>To use Godot 4, we recommend installing the .NET 8 SDK.</p> <p>:::tip You can install multiple versions of the .NET SDK. C# tooling is (generally) intelligent enough to pick the correct version based on the target framework of the project, the <code>global.json</code> file, and other settings in Godot. If you're running into issues with SDK resolution, feel free to reach out in Discord.</p> <p>It probably won't hurt to install the .NET 6 SDK and/or .NET 7 SDK, too \u2014 having .NET 6, 7, and 8 will allow you to run a variety of C# projects and tools. :::</p> <p>:::info We often write file paths like <code>~/folder</code>. The <code>~</code> is a shortcut for your home folder. On Windows, <code>~</code> expands to something like <code>C:\\Users\\you</code>. On macOS, <code>~</code> expands to <code>/Users/you</code>. On Linux, <code>~</code> expands to <code>/home/you</code>. For example, <code>~/Documents</code> expands to <code>C:\\Users\\you\\Documents</code> on Windows, <code>/Users/you/Documents</code> on macOS, and <code>/home/you/Documents</code> on Linux. :::</p> <p> <p>Use the Microsoft provided installer to install the .NET SDK on macOS. For more information about installing the .NET SDK on Mac, see Microsoft's article for Mac.</p> <p> <p>There's a few gotchas to be aware of when installing the .NET SDK on Linux, so please see Microsoft's article for Linux.</p> <p> <p>Open PowerShell as an administrator and use <code>winget</code> to install the .NET 8 SDK: <code>winget install dotnet-sdk-8</code> (or <code>winget upgrade</code> to upgrade an existing installation). For more information about installing the .NET SDK on Windows, see Microsoft's article for Windows or the release notes.</p> <p>You can also install the .NET SDK using the Microsoft provided installer, or through Visual Studio 2022 Community Edition.</p> <p> </p> <p>If you want to install the .NET SDK manually, you can find all available downloads here.</p> <p>The .NET SDK installers and package managers tend to place it in a standard location on each platform \u2014 if you install it manually, make sure you make a note of where you installed it to. We'll need that later.</p>"},{"location":"chickensoft/setup/#version-control-with-git","title":"\u23f3 Version Control with Git","text":"<p>You should absolutely be using a version control system to track your game's code and assets: specifically, git.</p> <p>:::danger</p> <p>\ud83d\udd25\ud83d\udd25\ud83d\udd25 Mistakes get made, tools can accidentally clear out files, scene references can get broken \u2014 bad stuff happens during the chaos of development.</p> <p>Git allows you to go back in time and undo unwanted changes, which is invaluable if you'd prefer development not be nightmare-inducing \ud83d\ude31. It also lets you collaborate with others easily and store your code in GitHub, GitLab, and other such git-related services.</p> <p>While learning git can seem daunting, it is absolutely your responsibility as a game developer to protect your valuable time and work, and using git is a mandatory part of the experience that enables you to do just that. Game development is extremely hard, so don't make it harder on yourself by leaving your work unprotected. \ud83d\udd25\ud83d\udd25\ud83d\udd25</p> <p>Be sure to bookmark the Undoing Changes in Git section to prevent panic during your next crisis. Messing up is not a matter of if, it's a matter of when \u2014 so be prepared.</p> <p>:::</p> <p>Properly learning and using git is a skill that gradually accrues over a lifetime of development, but the basics aren't too hard, and using Visual Studio Code can allow you to do it without ever really having to touch a command-line, for the most part.</p> <p>:::info</p> <p>Even if you're already using git, but you're not entirely comfortable with it, take a look at the aforementioned git beginner guide \u2014 this is the best guide, in my opinion, and the one I recommend to junior engineers all the time. You can jump straight into the advanced tips for anything you might be unsure about.</p> <p>:::</p>"},{"location":"chickensoft/setup/#shell-environment","title":"\ud83d\udda5 Shell Environment","text":"<p>Let's setup the shell environment to contain environment variables that point to the .NET SDK. This will allow you to run <code>dotnet</code> command line tool from anywhere. We will be using it to install GodotEnv to manage ours Godot installation, making Godot game development easier than ever.</p> <p>:::info</p>"},{"location":"chickensoft/setup/#which-shell-should-i-use","title":"\ud83d\udc69\u200d\ud83d\udcbb Which shell should I use?","text":"<p>For the sake of consistency, Chickensoft officially recommends using a bash shell on every OS, especially if you are developing your game to be cross-platform on macOS, Windows, and Linux \u2014 which is pretty easy to do with Godot, once your environments are setup correctly.</p> <p>Since a bash shell is not available on Windows by default, you can access one by installing git, which includes the Git Bash for Windows application. You can also configure the Windows Terminal (there's an option to add a Windows Terminal profile in the git installer) and VSCode to use bash by default.</p> <p>Bash is a bit esoteric, but you can easily learn the basics of bash that you'll need pretty quickly. Or you can dive in and read the whole book on bash.</p> <p>:::</p> <p>Once we do this, we'll be able to run Godot from a terminal and create the proper launch configurations for Visual Studio Code.</p> <p> <p>If <code>~/.zshrc</code> doesn't exist, you'll need to create it.</p> <p>:::tip To toggle visibility of hidden files in the macOS Finder, press <code>Cmd + Shift + .</code> \u2014 it also works in file dialogs! :::</p> <p>Add the following to your <code>~/.zshrc</code> file:</p> <pre><code># .NET SDK Configuration\nexport DOTNET_ROOT=\"/usr/local/share/dotnet\"\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1 # Disable analytics\nexport DOTNET_ROLL_FORWARD_TO_PRERELEASE=1\n\n# Add the .NET SDK to the system paths so we can use the `dotnet` tool.\nexport PATH=\"$DOTNET_ROOT:$PATH\"\nexport PATH=\"$DOTNET_ROOT/sdk:$PATH\"\nexport PATH=\"$HOME/.dotnet/tools:$PATH\"\n\n# Run this if you ever run into errors while doing a `dotnet restore`\nalias nugetclean=\"dotnet nuget locals --clear all\"\n</code></pre> <p> <p>If <code>~/.bashrc</code> doesn't exist, you'll need to create it. Add the following to the file:</p> <pre><code># .NET SDK Configuration\nexport DOTNET_ROOT=\"/usr/share/dotnet\"\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1 # Disable analytics\nexport DOTNET_ROLL_FORWARD_TO_PRERELEASE=1\n\n# Add the .NET SDK to the system paths so we can use the `dotnet` tool.\nexport PATH=\"$DOTNET_ROOT:$PATH\"\nexport PATH=\"$DOTNET_ROOT/sdk:$PATH\"\nexport PATH=\"$HOME/.dotnet/tools:$PATH\"\n\n# Run this if you ever run into errors while doing a `dotnet restore`\nalias nugetclean=\"dotnet nuget locals --clear all\"\n</code></pre> <p> <p>In Windows, when using the bash shell that comes with Git (Git Bash), you can place your shell configuration in <code>~/.bashrc</code>. In the file, add the following:</p> <pre><code># .NET SDK Configuration\nexport DOTNET_ROOT=\"C:\\\\Program Files\\\\dotnet\"\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1 # Disable analytics\nexport DOTNET_ROLL_FORWARD_TO_PRERELEASE=1\n\n# Add the .NET SDK to the system paths so we can use the `dotnet` tool.\nexport PATH=\"$DOTNET_ROOT:$PATH\"\nexport PATH=\"$DOTNET_ROOT\\\\sdk:$PATH\"\nexport PATH=\"$HOME\\\\.dotnet\\\\tools:$PATH\"\n\n# Run this if you ever run into errors while doing a `dotnet restore`\nalias nugetclean=\"dotnet nuget locals --clear all\"\n</code></pre> <p> </p> <p>:::info Depending on how you install the .NET SDK, you may or may not need to add them to your path in <code>~/.bashrc</code> (linux) or <code>~/.zshrc</code> (macOS). You can run <code>which dotnet</code> in a bash shell to see if they're already in your path. If they are, remove the <code>export PATH</code> lines for them added previously. If it is not the case, you should use <code>DOTNET_ROOT</code> to point to your <code>dotnet</code> root directory as showed above.</p> <p>Make sure the path to the .NET SDK matches where this tool was installed on your particular system, since it might be different if you installed it manually. :::</p>"},{"location":"chickensoft/setup/#installing-godot","title":"\ud83e\udd16 Installing Godot","text":"<p>You can use Chickensoft's command-line tool, GodotEnv, to manage Godot versions locally on your machine (as well as manage Godot asset library addons in your project).</p> <p>Chickensoft GodotEnv on GitHub</p> <p>:::info Using GodotEnv to install and manage Godot on your system provides a number of advantages:</p> <ul> <li> <p>\u2705 Automatically download, extract, and install any requested Godot 4.x+ version (with or without .NET support) from the Godot TuxFamily downloads mirror.</p> </li> <li> <p>\u2705 Automatically manage symlink on your system that point to the version of Godot you'd like to use. The symlink path never changes \u2014 just the version it points to.</p> </li> </ul> <p>On Windows, maintaining symlinks requires administrator privileges, making it a hassle to manage by hand. GodotEnv integrates with Windows' User Access Control (UAC) to automatically request admin privileges when needed.</p> <ul> <li> <p>\u2705 Adds a system <code>GODOT</code> environment variable that points to the symlink location, facilitating its usage through scripts.</p> </li> <li> <p>\u2705 Adds the <code>GODOT</code> pointed path to the system's PATH. Making initializing the Godot binary a breeze, just run <code>godot</code> to open the version managed by GodotEnv.</p> </li> <li> <p>\u2705 Standardizes installation locations across platforms and machines, making it easier to collaborate with other teammates.</p> </li> <li> <p>\u2705 Quickly change the system Godot version to any installed version, as well as listing all the installed versions.</p> </li> </ul> <p>:::</p> <p>To install GodotEnv, run the following:</p> <pre><code>dotnet tool install --global Chickensoft.GodotEnv\n</code></pre>"},{"location":"chickensoft/setup/#installing-with-godotenv","title":"\ud83e\uddbe Installing with GodotEnv","text":"<p>You can install Godot automatically by specifying a Godot version the way it appears here.</p> <pre><code>godotenv godot install 4.0.1\n</code></pre>"},{"location":"chickensoft/setup/#installing-manually","title":"\ud83d\ude13 Installing Manually","text":"<p>If you're not convinced, you can always download Godot manually and install it wherever you'd like.</p>"},{"location":"chickensoft/setup/#godot-installation-path","title":"\ud83d\udccd Godot Installation Path","text":"<p>If you're using GodotEnv, Godot versions will automatically be installed in the following locations:</p> <p> Location Path Symlink <code>/Users/{you}/.config/godotenv/godot/bin</code> Actual Path <code>/Users/{you}/.config/godotenv/godot/versions/godot_dotnet_{version}/Godot_mono.app/Contents/MacOS/Godot</code> <p> Location Path Symlink <code>/home/{you}/.config/godotenv/godot/bin</code> Actual Path <code>/home/{you}/.config/godotenv/godot/versions/godot_dotnet_{version}/Godot_v{version}-stable_mono_linux_x86_64/Godot_v{version}-stable_mono_linux.x86_64</code> <p> Location Path Symlink <code>C:\\Users\\{you}\\AppData\\Roaming\\godotenv\\godot\\bin</code> Actual Path <code>C:\\Users\\{you}\\AppData\\Roaming\\godotenv\\godot\\versions\\godot_dotnet_{version}\\Godot_v{version}-stable_mono_win64\\Godot_v{version}-stable_mono_win64.exe</code> <p> </p> <p>:::caution All Chickensoft templates and VSCode launch configurations rely on an environment variable named <code>GODOT</code> that contains the path to the version of Godot you'd like to use.</p> <p>GodotEnv will automatically update your environment variables by updating the <code>~/.zshrc</code> file on macOS or the <code>~/.bashrc</code> file on Linux to point to its symlink which in turn points to the active version of Godot. On Windows, GodotEnv will automatically attempt to update the environment variable with the relevant command prompt commands with requested admin privileges.</p> <p>\u2757\ufe0f You will have to logout and login again after environment variables have been updated for all applications to see the updated values.</p> <p>If you're not using GodotEnv or want to double check that the variable exists, please make sure you've setup the environment variables as follows:  <p>In your <code>~/.zshrc</code> file, make sure something like the following exists.</p> <pre><code># This should be added to your ~/.zshrc file by GodotEnv automatically, but\n# you can also add it manually and change the path of Godot to match\n# your system.\nexport GODOT=\"/Users/{you}/.config/godotenv/godot/bin\"\n</code></pre> <p> <p>In your <code>~/.bashrc</code> file, make sure something like the following exists.</p> <pre><code># This should be added to your ~/.zshrc file by GodotEnv automatically, but\n# you can also add it manually and change the path of Godot to match\n# your system.\nexport GODOT=\"/home/{you}/.config/godotenv/godot/bin\"\n</code></pre> <p> <p>Windows has a visual editor for updating environment variables. See this article.</p> <p>  :::</p> <p>If you're installing manually, consider placing it in one of the following locations:</p> <p> <p>Move Godot to <code>/Applications/Godot_mono.app</code>. This is where all your other Mac apps are, anyways!</p> <p> <p>If you're using Linux, you probably have your own opinion on where to put it. If you're not sure, you can place the Godot executable (and its supporting files) in its own folder inside your user folder: <code>/home/Godot</code>.</p> <p> <p>On Windows, you can place Godot and any supporting files at <code>C:\\Godot\\Godot_mono.exe</code> or in its own folder in your user folder: <code>C:\\Users\\{you}\\Godot</code>.</p> <p> </p>"},{"location":"chickensoft/setup/#visual-studio-code","title":"\u2328\ufe0f Visual Studio Code","text":"<p>All of Chickensoft's packages and templates are designed to work well with Visual Studio Code (VSCode).</p> <p>You can download Visual Studio Code here.</p>"},{"location":"chickensoft/setup/#vscode-extensions","title":"\ud83d\udd0c VSCode Extensions","text":"<p>At the very least, you'll need the <code>ms-dotnettools.csharp</code> extension. Chickensoft also recommends a handful of other extensions that make development easier.</p>"},{"location":"chickensoft/setup/#vscode-settings-for-godot-and-c","title":"\ud83d\udcbe VSCode Settings for Godot and C#","text":"<p>We need to turn OmniSharp back on \u2014 it should have never been turned off by default.</p> <p>Open your VSCode Settings as a JSON file and add the following settings:</p> <pre><code>\"dotnetAcquisitionExtension.enableTelemetry\": false,\n// Increases project compatibility with the C# extension.\n\"dotnet.preferCSharpExtension\": true,\n</code></pre> <p>Chickensoft also recommends the following additional settings for a pleasant C# development experience:</p> <pre><code>\"csharp.suppressHiddenDiagnostics\": false,\n// Draw a line between selected brackets so you can see blocks of code easier.\n\"editor.guides.bracketPairs\": \"active\",\n\n\"[csharp]\": {\n  \"editor.codeActionsOnSave\": {\n    \"source.addMissingImports\": \"explicit\",\n    \"source.fixAll\": \"explicit\",\n    \"source.organizeImports\": \"explicit\"\n  },\n  \"editor.formatOnPaste\": true,\n  \"editor.formatOnSave\": true,\n  \"editor.formatOnType\": true\n},\n\n// To make bash the default terminal on Windows, add these:\n\"terminal.integrated.defaultProfile.windows\": \"Git Bash\",\n\"terminal.integrated.profiles.windows\": {\n  \"Command Prompt\": {\n    \"icon\": \"terminal-cmd\",\n    \"path\": [\n      \"${env:windir}\\\\Sysnative\\\\cmd.exe\",\n      \"${env:windir}\\\\System32\\\\cmd.exe\"\n    ]\n  },\n  \"Git Bash\": {\n    \"icon\": \"terminal\",\n    \"source\": \"Git Bash\"\n  },\n  \"PowerShell\": {\n    \"icon\": \"terminal-powershell\",\n    \"source\": \"PowerShell\"\n  }\n}\n</code></pre> <p>Finally, C#'s semantic highlighting is a bit funky, so you can fix that by adding these color adjustments:</p> C# Semantic Syntax Highlighting Color Correction Settings <pre><code>\"editor.tokenColorCustomizations\": {\n  \"[*Dark*]\": {\n    // Themes that include the word \"Dark\" in them.\n    \"textMateRules\": [\n      {\n        \"scope\": \"comment.documentation\",\n        \"settings\": {\n          \"foreground\": \"#608B4E\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.attribute\",\n        \"settings\": {\n          \"foreground\": \"#C8C8C8\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.cdata\",\n        \"settings\": {\n          \"foreground\": \"#E9D585\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.delimiter\",\n        \"settings\": {\n          \"foreground\": \"#808080\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.name\",\n        \"settings\": {\n          \"foreground\": \"#569CD6\"\n        }\n      }\n    ]\n  },\n  \"[*Light*]\": {\n    // Themes that include the word \"Light\" in them.\n    \"textMateRules\": [\n      {\n        \"scope\": \"comment.documentation\",\n        \"settings\": {\n          \"foreground\": \"#008000\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.attribute\",\n        \"settings\": {\n          \"foreground\": \"#282828\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.cdata\",\n        \"settings\": {\n          \"foreground\": \"#808080\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.delimiter\",\n        \"settings\": {\n          \"foreground\": \"#808080\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.name\",\n        \"settings\": {\n          \"foreground\": \"#808080\"\n        }\n      }\n    ]\n  },\n  \"[*]\": {\n    // Themes that don't include the word \"Dark\" or \"Light\" in them.\n    // These are some bold colors that show up well against most dark and\n    // light themes.\n    //\n    // Change them to something that goes well with your preferred theme :)\n    \"textMateRules\": [\n      {\n        \"scope\": \"comment.documentation\",\n        \"settings\": {\n          \"foreground\": \"#0091ff\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.attribute\",\n        \"settings\": {\n          \"foreground\": \"#8480ff\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.cdata\",\n        \"settings\": {\n          \"foreground\": \"#0091ff\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.delimiter\",\n        \"settings\": {\n          \"foreground\": \"#aa00ff\"\n        }\n      },\n      {\n        \"scope\": \"comment.documentation.name\",\n        \"settings\": {\n          \"foreground\": \"#ef0074\"\n        }\n      }\n    ]\n  }\n},\n</code></pre>"},{"location":"chickensoft/setup/#creating-godot-projects","title":"\u2728 Creating Godot Projects","text":"<p>Chickensoft provides a few <code>dotnet new</code> templates to help you quickly create a C# projects for use with Godot 4.</p> <p>Now that you've configured your environment (and hopefully rebooted since then), you should be able to use the <code>dotnet</code> tool from your terminal to be able to install Chickensoft's development templates.</p> <pre><code>dotnet new install Chickensoft.GodotGame\ndotnet new install Chickensoft.GodotPackage\n</code></pre>"},{"location":"chickensoft/setup/#creating-a-godot-game","title":"\ud83c\udfae Creating a Godot Game","text":"<p>The GodotGame template allows you to quickly generate a game with debug launch configurations for VSCode, testing (locally and on CI/CD), code coverage, dependency update checks, and spell checking!</p> <p>Chickensoft GodotGame on GitHub</p> <p>To create a new game, simply run the following commands and open the resulting directory in Godot and VSCode.</p> <pre><code>dotnet new chickengame --name \"MyGameName\" --param:author \"My Name\"\n\ncd MyGameName\ndotnet restore\n</code></pre> <p>\ud83e\udd73 At last \u2014 you're finally ready to make a game!</p>"},{"location":"chickensoft/setup/#creating-a-reusable-nuget-package","title":"\ud83d\udce6 Creating a Reusable Nuget Package","text":"<p>If you want to share compiled source code between projects or allow others to use your code in their projects, you can release a Nuget package.</p> <p>Using the GodotPackage template allows you to setup a package with continuous integration, auto-formatting, debugger profiles for VSCode, and a pre-configured unit test project.</p> <p>Chickensoft GodotPackage on GitHub</p> <pre><code>dotnet new --install Chickensoft.GodotPackage\n\ndotnet new chickenpackage --name \"MyPackageName\" --param:author \"My Name\"\n\ncd MyPackageName\n/path/to/godot4 --headless --build-solutions --quit\ndotnet build\n</code></pre> <p>Open the new project in VSCode and use the provided launch configurations to debug your application.</p> <p>:::tip If you need to share code and other resource files like scenes, textures, music, and anything else that isn't a C# source file, you should use a Godot Asset Library package instead. Chickensoft's GodotEnv CLI tool allows you to easily install and manage addons in your project.</p> <p>Chickensoft GodotEnv on GitHub :::</p>"},{"location":"chickensoft/setup/#setting-up-dev-containers","title":"Setting Up Dev Containers","text":"<p>Chickensoft's development tools provide scripts that make it easier to setup and use Godot with C# in a dev container.</p> <p>Chickensoft GodotEnv on GitHub</p>"},{"location":"chickensoft/setup/#using-chickensofts-templates","title":"Using Chickensoft's Templates","text":"<p>These templates show how to setup a Godot C# project.</p> <p>Chickensoft GodotGame on GitHub</p>"},{"location":"chickensoft/setup/#creating-a-c-package-for-godot","title":"Creating a C# Package for Godot","text":"<p>We also have a project template for creating packages that can be imported by Godot projects.</p> <p>Chickensoft GodotPackage on GitHub</p>"},{"location":"chickensoft/setup/#using-a-container-registry","title":"Using a Container Registry","text":"<p>When building and testing your project using GitHub Actions, it can be helpful to use a container registry if your project has external dependencies.</p> <p>Chickensoft GodotEnv on GitHub</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/","title":"It's time to make that indie C# game in Godot.","text":"<p> Third Person Shooter Demo by the Godot Engine</p> <p>You've always dreamed of making that C# game, but engines have always made it too difficult \u2014 until now.</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#unrest-in-the-indie-c-game-dev-world","title":"Unrest in the indie C# game dev world","text":"<p>For some time, C# has been a popular choice for game developers, originally gaining popularity with Microsoft's XNA framework before being further popularized by tools like Monogame, Unity, and Godot.</p> <p>Unity, often considered the de facto engine of choice for C# game development, has been in the news a lot lately for laying off a chunk of its workforce, threatening to remove its forums, shedding $5 billion in market cap, and merging with a known adware company, IronSource. Reddit comments are full of loyal Unity users starting to question if Unity has forgotten them, with comments ranging from \"maybe I should learn Unreal\u2026\" to \"this is why you don't go public.\"</p> <p>Just to be clear, I don't take pleasure in being critical of Unity, and I think it's a shame all those Unity employees are losing their jobs. At first glance, Unity is so laughably ahead of Godot in sheer number of features supported that it seems comical to compare the two. One is an industry behemoth and the world's most popular game engine, while the other is a free, 30 megabyte program developed by passionate developers in their free time.</p> <p>Unity can technically do much more than Godot, at least on paper. In practice, Unity requires 3rd party tools for tweens, timers, and networking, all of which Godot includes out-of-the-box. Still, I'd argue that it doesn't actually matter for the vast majority of us indie game developers. The rest of this blog only exists to convince you of that argument.</p> <p>Do you want to make the world's best-looking game with the latest, buggy technologies, or do you want to actually have fun making games? If you said yes to the last part of that question, I'd like to invite you to try Godot. If you've already tried Godot a while back and gave up, I'd like to ask you to give Godot another chance. It might be better now than you realize.</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#unity-isnt-fun-anymore","title":"Unity isn't fun anymore","text":"<p>It's no secret that Unity is painful to use: it's slow to open, and it often pauses to re-scan the entire project while you're trying to work. If you're trying to use source control with a few other people, you have to work even harder to get everything to play nice with Unity's unique file formats. By modern standards, Unity development can feel a bit backwards at times.</p> <p>When you open Godot, it opens almost instantaneously. The UI is just the right size, and all of the controls are easily accessible in a few simple panes you can rearrange to your liking.</p> <p>In Godot, everything is composed of nodes. No prefabs, game components, or other abstractions to learn. Just nodes. A scene is just a tree of nodes, saved as a plain text file in a familiar configuration format that you can easily read in a text editor. Need to quickly edit a scene to fix a reference to a file that was renamed or moved outside of Godot? Just open it up in your code editor and fix the path. When you switch back to the Godot editor, it will reload the project before you can blink. There's no difficulty with source control, either: everything just works because everything's text.</p> <p>Godot also gives you full control of your <code>.csproj</code> file, allowing you to setup dependencies and configure MSBuild as much as you want. Want to use code generators? You can do that. Custom Roslyn analyzers? Go for it. Your own nuget packages? Check.</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#its-actually-fun-to-use-godot","title":"It's actually fun to use Godot","text":"<p>Godot doesn't fight you when you're building scenes. Making a scene feels a lot like creating a class using composition, and scenes can even inherit from other scenes (using another scene as the the root node of a scene allows you to inherit from it and override its properties in the editor and in code), allowing you to express patterns you're intimately familiar with from object-oriented programming.</p> <p>Wasn't \"having fun\" the whole point of making a game in C#, anyways? Using a managed language was supposed to make creating games easier, not harder. Don't worry about all the bits and bytes, C# will take care of it for you. Sadly, we lost that along the way when for-profit game engine companies decided to prioritize the monetization of their tools over the happiness of their users. It isn't that way with Godot: making C# games is fun again.</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#but-what-about-unitys-asset-store","title":"But what about Unity's asset store?","text":"<p>\"Alright, I want to switch to Godot,\" you say, \"but I need those high quality paid assets from the Unity Asset Store since I'm not an artist/musician/expert coder/etc.\"</p> <p>Unfortunately, the paid asset store is the biggest sacrifice you'll have to make. While it can't always compare to Unity's paid offerings, the Godot Asset Library offers 1300+ creations for free. Have you seen all of the awesome stuff people have made in Godot?</p> <p>It's possible that donations or payments will be coming to the Godot Asset Library, allowing creators to be rewarded for their work, but I haven't heard anything conclusive just yet. If it does, expect a lot more high-quality assets in the near future.</p> <p>Most people would probably agree that being retired with a terrible disease that affects your quality of life is a lot worse than being retired in good health. So why would you keep using a game engine that's making you miserable? Making games is supposed to be fun!</p> <p>If it's just the Unity Asset Store holding you back, there's probably nothing I can say to convince you to give Godot a chance. But if you're resourceful and don't mind a little extra work, and/or you're willing to port your scripts over and import your 3D models into Godot, you might be pleasantly surprised by what you're missing.</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#youre-the-star-of-the-show","title":"You're the star of the show","text":"<p>Godot prioritizes developer experience. I don't think that's explicitly written in the docs, and I've never heard anyone else say it, but that's how I feel when I use Godot. Sure, it has fewer features than the dominating game engines, but the \"few\" features it does have are so polished and well thought-out that it's a joy to use. When I use Godot, I feel special. Godot's docs are thorough, well-written, and explanatory. If you're really stuck, you can look through it's source code (I've actually done that a few times and figured things out). Everything just works (generally), right out of the box!</p> <p>Did you know that killer features like Godot 4's <code>NavigationServer</code> (with local object avoidance) are now available as of 3.5? You can even compute navigation meshes at runtime. The Godot developers prove their commitment to you by back-porting some of the most valuable features that were developed for 4.0. They're doing that because you \u2014 the game developer \u2014 are the focal point of their universe.</p> <p>The Godot team is not seeking commercial success. It's the same strategy that worked for Blender: make the best possible program for the people. They couldn't make it any clearer: the Godot team wants you to have a good time making games!</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#ill-wait-until-the-next-version","title":"\"I'll wait until the next version.\"","text":"<p>A lot of people are holding out for Godot 4.0. Either they're procrastinating, or they sincerely believe Godot can't do what they want it to do. That might be true for a big team making the next big thing, but for most of us indie devs \u2014 really? You can't start work on anything yet just because Godot doesn't have LOD? I have a hard time believing that.</p> <p>Long-time Unity users probably know the feeling of waking up to find out that a feature they really enjoyed (or relied on) was getting axed because Unity wanted to monetize something differently instead of just making the developers happy.</p> <p>Chances are, by the time you succeed in pushing the limits of Godot, a new version will have been released that can do even more.</p> <p>We're not waiting on Godot anymore, and neither should you. It's time for you to be happy.</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#c-in-godot-where-were-at-in-2022","title":"C# in Godot: where we're at in 2022","text":"<p>C# support in Godot has come a long ways since it was first introduced years ago. Godot allows you to use C# 10, which makes for an incredible developer experience (Unity doesn't even fully support C# 9).</p> <p>While the C# Godot community is fairly small (about 14% of the approximately 5,000 users who responded to the Godot Community Poll 2022 are using C#), we've been able to create addon managers, test frameworks, serializers, mod loaders, logging, node-based dependency managers, Steam integrations, and so much more.</p> <p>On Reddit, r/Godot has 90,000+ members. The official discord has well over 45,000. With thousands more joining all the time, you'd be in good company. Tons of games on Steam are released using Godot. On Patreon, Godot is bringing in over $15,000 a month.</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#c-in-godot","title":"C# in Godot","text":"<p>Setting up a complex Godot project with C# can be a bit tricky, especially if you're not familiar with the strange hell that is MSBuild. In spite of it all, the community has helped me accomplish everything I've ever wanted to do.</p> <p>I've spent a lot of time documenting how to setup C# projects in Godot, especially since a lot of the people wanting to use C# with Godot are fairly new to it. If you want some examples and documentation for how to setup and structure your project, I highly encourage you to check out some of the GitHub repositories for my organization, Chickensoft. Or you can pop into our Discord server and we'll be happy to help!</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#but-what-about-testing","title":"But what about testing?","text":"<p>If you're a test-driven development occultist (or just enthusiastic about testing), you might be wondering how to write tests for your C# Godot game. For a while, that was very difficult, unless you were using XUnit with Rider (which has its own challenges).</p> <p>Testing is no longer difficult to setup. There are multiple libraries for writing tests for C# Godot code, including Chickensoft's official test framework, go_dot_test that lets you debug tests from VSCode, collect coverage, and run tests from the command line.</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#whats-missing-in-the-godot-c-ecosystem","title":"What's missing in the Godot C# ecosystem?","text":"<p>While Godot's C# support is truly incredible, the ecosystem is fairly light on utilities, particularly networking frameworks and deep editor integrations for C#. There's also no single, direct equivalent to tools like Odin for Unity. If you're up for the challenge of being an early adopter and lie awake at night thinking about open source software, you could be the one to create the next big, useful tool for the Godot C# world.</p> <p>While Godot has incredible, easy-to-use RPC networking support built into the current 3.x versions, it doesn't have the ability to swap out transports to use something like Steamworks or other messaging protocols under the hood, at least from what I understand. That might be coming in 4.0.</p> <p>Even so, we're currently building our own networking library in C# for Godot, loosely inspired by Mirror and Netcode for GameObjects that circumvents Godot's networking entirely, for those who might want a more custom approach to networking or need to support certain transports. I'll take all the help I can get, too, because I am way out of my depth on this one!</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#what-else-should-i-know-about-c-in-godot","title":"What else should I know about C# in Godot?","text":"<p>Like other engines, Godot marshals types back and forth between its C++ and C# layers. Not all types can convert into one of Godot's types, but it isn't as big of a problem as you might think. For most game logic, you can create classes, records, and structs the way you normally would, and everything will work fine in the C# layer.</p> <p>If you need to pass a type to a Godot subsystem, or to a node that's using GDScript, you'll want to make sure any custom objects involved are C# classes that extend <code>Godot.Object</code> (or <code>Godot.Reference</code>), since that's the only way Godot can serialize and track values correctly (the c++ layer uses reference counting, not garbage collection). You can also use C#'s events, which are strongly typed, but if you need to interface with node events, you should use Godot's signal system. In general, I tend to prefer vanilla C# features over Godot types to avoid marshaling penalties and to leverage C#'s strong typing. When I need to interface with Godot nodes, GDScript, or anything that expects Godot types, I adopt Godot's way of doing things. So far, that has worked out really well for me, and I think it will for you, too.</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#what-about-asynchrony","title":"What about asynchrony?","text":"<p>Using <code>async</code> and <code>await</code> with C#'s Task can be a bit of a headache with Godot, especially if you don't realize that that most ways of executing an async Task in C# starts a new thread (or recycles one from the task thread pool). In general, I recommend avoiding asynchrony where possible, unless you have a good way of keeping it self-contained and use it only where absolutely necessary, such as for loading systems or in integration tests (where you need to <code>await</code> across frames). If you can't escape asynchrony, you can always use C# events to interface with the rest of your synchronous code to keep things simple.</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#c-constructors-and-godot","title":"C# constructors and Godot","text":"<p>Because of the way Godot spins up classes, you should avoid creating values in your Godot Node's constructor and instead initialize values when Godot calls your node's <code>_Ready</code> method. If you try to do it too early, you introduce a lot of instability in your game. Since C# doesn't have a <code>late</code> modifier (Dart) or <code>lazy</code> (Kotlin), you can simply initialize values to <code>null</code> (or <code>null!</code> if you're using null-aware code) and finish initializing your fields in <code>_Ready</code>.</p> <p>I know that's a little technical, but knowing those few things should save you a few headaches. It certainly would have helped us!</p>"},{"location":"chickensoft/blog/posts/2022-07-03-indie-game-godot/#open-source-always-wins","title":"Open source always wins","text":"<p>Godot may not ever be the dominating game engine, but we believe an open source game engine will dominate the field someday, given enough time. Godot prioritizes developers, and when developers win, everyone else eventually wins, too.</p> <p>So what are you waiting on? It's certainly not Godot. Make that indie C# game you've been dreaming about! We'll always be in Discord to help! Visit Chickensoft on Github!</p> <p>Join our Discord: https://discord.gg/MjA6HUzzAE</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/","title":"Godot and C#: A Viable Unity Alternative","text":"<p> SatiRogue by @TetrisMcKenna</p> <p>Godot is a viable alternative to Unity \u2014 not just for early adopters, but for game developers and artists across the entire skill spectrum.</p> <p>The engine provides a significantly better development experience (via text-based resources) and a snappy, responsive user interface. We'll spend the rest of the blog defending that statement and addressing common concerns about Godot.</p> <p>Over the last few months, I've heard dozens of questions from interested users about Godot, the C# support it provides, and the future of the engine. It's important to note that I am in no way officially affiliated with the Godot Engine organization. I have, however, spoken with some of the core engine developers and contributors and I'd like to put the arguments against Godot and C# to rest, once and for all.</p> <p>There's a lot to cover, and it's all good news \u2014 so let's dive in!</p> <p>Unrelated: this blog has officially moved away from Medium!<sup>1</sup></p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#godots-big-year","title":"\ud83c\udf87 Godot's Big Year","text":"<p>If you haven't been watching too closely, you might have missed some of the news! Godot 4 is now in beta, and it's shipping some impressive new features:</p> <ul> <li>Vulkan renderer</li> <li>Signed distance, field-based global illumination (SDFGI) for large open worlds</li> <li>GPU lightmapping</li> <li>Custom sky shaders</li> <li>Automatically generated LOD (level-of-detail) meshes</li> <li>.NET 6 support</li> <li>Revamped shader language</li> <li>Circular dependencies support for GDScript</li> <li>...and countless other changes</li> </ul> <p> Aniela \u2014 a lighting study made in Godot by @cybereality demonstrating Godot 4's new SDFGI features.</p> <p>To top it all off, C# support has been completely overhauled by migrating away from mono and integrating support for .NET 6 directly. We'll come back to that in a bit.</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#overwhelming-support","title":"Overwhelming Support","text":"<p>Godot continues to receive an overwhelming amount of support from the community. The creator of Godot, Juan Linietsky, describes how Godot suffers from the best possible problem:</p> <p>we have too many people who are doing things really really efficiently and really well.\"<sup>2</sup></p> <p>Essentially, the sheer number of contributors (1,800+ on GitHub) almost guarantees that any specific feature is being worked on at any given moment.</p> <p>On Patreon, Godot now receives over <code>$15,000 USD</code> of donations per month. That's an increase of <code>$2,000 USD</code> per month since I last checked on it in the summer.</p> <p>The Godot subreddit, r/godot, now has over 101,000 members, an increase of at least 5,000 users since the summer (probably in large part to Unity's missteps). The official Godot Discord now has over 50,000 users.</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#addressing-your-concerns","title":"\ud83d\udc81\u200d\u2640\ufe0f Addressing Your Concerns","text":"<p>On Reddit (and occasionally elsewhere), interested users will ask if C# is \"ready\" or a \"first-class\" citizen in Godot. The answer is simple: yes.</p> <p>If you don't believe me, read on. We'll respond to each of the common arguments against Godot and its support for C#.</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#wheres-the-asset-store","title":"Where's the asset store?","text":"<p>When I tell people that Godot is a viable Unity alternative, this is usually the first counterargument I hear, and for good reason. Godot doesn't have a monetization system for assets...yet.</p> <p>Of course, Godot does have an official Asset Library with over 1,500 assets, but they're all free. \ud83d\ude41</p> <p>Most of us would normally be thrilled about free assets, but when you're an artist or developer who relies on selling your assets to support yourself, giving away your products is a no-go. It's only fair that you should be able to make a living doing what you're good at.</p> <p>Monetization, as someone pointed out on Reddit, requires a lot of bureaucratic effort. Collecting payments and being responsible for payment handling is a gigantic chore.</p> <p>In 2021, the founder of Godot \u2014\u00a0Juan Linietsky \u2014\u00a0confirmed a paid asset marketplace was on the way.</p> <p>The Godot team recently announced the formation of the non-profit Godot Foundation, citing a paid asset marketplace as one of the primary motivations:</p> <p>As Godot keeps growing, so do our needs. Godot's size merits the flexibility of having its own organization and the opportunity to explore broader funding sources.</p> <p>Examples of this are crowdfunding campaigns (like Blender or Krita do), the highly requested ability for users to sell assets on an asset library (and have a share going to the Godot Foundation), selling merchandise, and other types of funding.</p> <p>While that doesn't solve the problem today, you can probably get pretty far with the 1,500+ free assets that already exist.</p> <p>For some users, having access to a multitude of assets is non-negotiable. Those users will not use Godot until its asset library is a thriving, paid marketplace. For most developers, however, I believe the boost in developer productivity Godot provides over Unity et al. more than makes up for any reduction in assets.</p> <p>For example: if you're creating your own art, or purchasing art and models from artists, you're probably writing all your own custom code anyways. Why not do it in Godot? The editor won't hang for 2 minutes straight whenever it decides to scan your assets, unlike in other engines, cough cough.</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#what-about-c","title":"What About C#?","text":"<p>People often ask \"is C# a first class citizen?\" when looking into Godot and C#. I believe the question became popular when Godot first introduced C#. Like all new features, C# support was initially incomplete and poorly documented, but solidified over time. These days, the Godot Docs provide almost every code example in both C# and GDScript, and C# support in Godot 3 (LTS) is incredibly robust.</p> <p>If you are looking for C# API docs, paulloz maintains a C# version of the Godot API docs.</p> <p>Just to reiterate, Godot supports two first-party programming languages: GDScript and C#. All other language bindings are unofficial, third party projects.</p> <p>When asked if the new <code>GDExtension</code> support in Godot would replace the need for first-party C# support, neikeq (one of the core Godot C# contributors), explained that C# support would continue to be built-in because it would be difficult (if even possible) to load more than one .NET assembly through a native extension.</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#future-of-c-support","title":"Future of C# Support","text":"<p>I asked neikeq a couple of questions about C# in Godot via private message in Discord, and with their permission I am posting some of the interview here (lightly edited for clarity):</p> <p>me: A lot of people are on the fence about Godot because they're not sure C# support is planned long term, or maybe they've been burned by the lack of documentation in the past. What do you want them to know?</p> <p>neikeq: They shouldn't worry about C# support in the long term. There was a lot of concern about that this year because initially C# wasn't included with the Godot 4 alpha releases, but now it's already there and soon it will be unified as a single version of Godot.</p> <p>One of the most important factors for the future of C# support is that starting with Godot 4, it's much easier to maintain. There is still room for improvement (for example, changing/adding a type for marshalling takes a bit more work right now). But the amount of work we took off our shoulders is huge. That's time that can be spent on other parts like addressing issues.</p> <p>Hopefully there will be less confusion about some things as well. Previous marshalling errors that would be printed at runtime are now compiler errors.</p> <p>me: Is the maintenance effort easier because of the new source generators, or other changes that were made?</p> <p>neikeq: We no longer build the Mono runtime ourselves, which was especially painful on platforms like wasm, iOS and even Android sometimes. As well as having to maintain build code for some of those platforms and ensuring that it works (like AOT for iOS). That's all offloaded to MSBuild with the official .NET releases. Granted we don't have mobile and wasm support yet but when the time comes, it will be easier to implement. The new hosting + pure C# + source generators is also easier to maintain than our previous approach with the Mono embedding APIs (although marshalling needs to be improved in this regard as I mentioned).</p> <p>me: Any closing words to those who were worried C# support was going away?</p> <p>neikeq: We don't have any intention of removing C# support because a lot of people in the industry communicate to us that C# support is a big factor in adopting the engine.</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#a-bigger-c-ecosystem","title":"A Bigger C# Ecosystem","text":"<p>Still skeptical about taking the plunge on an open source game engine? Allow me to sweeten the deal by showcasing some awesome C# projects.</p> <p>Our feature image for this article is from SatiRogue, a \"turn-based dungeon-crawler rogue-like RPG, made with Godot 3.x C# + RelEcs\" by TetrisMcKenna. The source code is freely available on GitHub under the MIT license.</p> <p></p> <p>SatiRogue on GitHub</p> <p>Here's a few other awesome projects written in C#:</p> <p>Carnagion on GitHub derkork on GitHub Byteron on GitHub</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#free-stuff-from-chickensoft","title":"\ud83d\udc24 Free Stuff from Chickensoft","text":"<p>Chickensoft had a good first year: what originally started as a C#-focused fan club for Godot has blossomed into a small community of enthusiastic package authors and game developers. Our community members have helped answer technical questions about Godot and C#, shared a number of open source packages, and filed multiple bug reports on the Godot engine (some of which have already been fixed!).</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#ready-for-godot-4","title":"Ready for Godot 4","text":"<p>I'm pleased to announce that all of the Chickensoft packages have been officially updated for Godot 4!</p> <p>By adding a few nuget <code>&lt;PackageReference&gt;</code> tags to your <code>.csproj</code> file, you can get node-based dependency provisioning, logging, automated testing, and state machines up and running with Godot 4, for free!</p> <p>All of the Chickensoft packages were dogfooded, meaning I built them because I was trying to solve the same problems every time I created a new game project. I never did finish a game, but at least I have some tools. Maybe next time...</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#announcing-godotenv","title":"Announcing GodotEnv","text":"<p>GodotEnv is a command line tool to help manage Godot addons and quickly create new Godot projects from a template.</p> <p></p> <p>GodotEnv on GitHub</p> <p>While learning Godot, I kept running into the same few headaches over and over. When trying to make my code reusable across game projects, I realized there was no easy way to keep my addons up to date while I was still developing them. Likewise, whenever I created a new sandbox project, I had to copy a dozen or so files into the new project every time.</p> <p>GodotEnv's addon management system allows you to declare dependencies in their own file (to prevent versioning headaches with git submodules), while template generation enables you to quickly create new projects without having to copy over all the files you need each time.</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#addon-management-simplified","title":"Addon Management, Simplified","text":"<p>Godot addons are simply git repositories with an <code>addons/your_addon_name</code> folder inside them. The contents of that folder (scenes, scripts, art assets, etc) will be copied to a project folder's <code>addons/your_addon_name</code> when a user installs your addon. Because addons are a flat folder structure, people often think to use git submodules for addons in their project repositories. I initially tried git submodules and found it was too difficult to keep everything up-to-date across all of my projects that were using the addons.</p> <p>:::info When using C# with Godot, you have two mechanisms for reusing code: addons and nuget packages.</p> <p>Importing nuget packages is as simple as adding them to your Godot project's <code>.csproj</code> file. Unfortunately, you can't really import scenes or other assets from nuget packages. They're only good for reusing code.</p> <p>Addons, on the other hand, allow you to reuse anything. :::</p> <p>If git submodules also sound too painful to you, GodotEnv allows you to declare what addons your project needs in an <code>addons.json</code> file so it can install them for you.</p> <p>GodotEnv also lets you install addons by copying or symlinking to local folders.</p> <pre><code>{\n  \"path\": \"addons\",\n  \"cache\": \".addons\",\n  \"addons\": {\n    \"godot_dialogue_manager\": {\n      \"url\": \"https://github.com/nathanhoad/godot_dialogue_manager\",\n      \"source\": \"remote\",\n      \"checkout\": \"main\",\n      \"subfolder\": \"addons/dialogue_manager\"\n    },\n    \"my_local_addon_repo\": {\n      \"url\": \"../my_addons/my_local_addon_repo\",\n      \"source\": \"local\"\n    },\n    \"my_symlinked_addon\": {\n      \"url\": \"/drive/path/to/addon\",\n      \"source\": \"symlink\"\n    }\n  }\n}\n</code></pre> <p>Then, all you have to do is run the following:</p> <pre><code>godotenv addons install\n</code></pre>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#conclusion","title":"\ud83c\udfac Conclusion","text":"<p>The Godot ecosystem provides an asset library, monthly game jams, and numerous developer communities. If you're using C# with Godot, you can use just about anything on nuget in your project, unlocking the entire C# ecosystem in addition to everything Godot has to offer. Whether you're still planning your project or putting the finishing touches on it, there's an entire ecosystem in place to support you. Godot apps can be released on every major platform, and multiple companies can provide support for developers who wish to publish their games on consoles.</p> <p>Making Godot games with C# is an incredible experience, and it's only getting better. If you're looking to start (or continue) your game development journey, you are more than welcome to be a part of our open source community here at Chickensoft.</p> <p>If you're already making games with Godot and C# and want your project featured in a blog, let's get in touch!</p> <p>Join our Discord: https://discord.gg/MjA6HUzzAE</p>"},{"location":"chickensoft/blog/posts/2022-11-27-godot-unity-alternative/#footnotes","title":"Footnotes","text":"<ol> <li> <p>Hosting the blog on a website instead of on Medium allows me to integrate custom widgets: it's a big win all around. If you like this website, feel free to fork it. Besides, hacker news readers (who have been the most engaged audience so far) tend to dislike Medium because of the reading limit. If you're reading this from hacker news (or anywhere else), welcome!\u00a0\u21a9</p> </li> <li> <p>Tune into around 00:48:00 of The Role of Open Source Game Engines: Godot and O3DE on the Podcast Building the Open Metaverse \u21a9</p> </li> </ol>"},{"location":"chickensoft/blog/posts/2023-04-26-gdscript-vs-csharp/","title":"GDScript vs C# Performance Comparison","text":"<p>This past week, I spent some time investigating the differences between GDScript and C#. I've been creating a lot of C# libraries for Godot lately, so it was important for me to get a sense of which use cases might warrant the additional complexity of C#.</p>"},{"location":"chickensoft/blog/posts/2023-04-26-gdscript-vs-csharp/#anecdotal-evidence","title":"\ud83d\udc40 Anecdotal Evidence","text":"<p>If you search online, you'll find a lot of anecdotal evidence suggesting that C# is significantly faster than GDScript. This makes sense, since C# is typically faster than most interpreted languages. But performance is a complex thing, and I wanted to know for myself! \ud83e\udde0</p>"},{"location":"chickensoft/blog/posts/2023-04-26-gdscript-vs-csharp/#lets-test-it","title":"\ud83d\udd0d Let's Test It","text":"<p>I did some testing with GDScript and C# for the 2 types of processing-heavy systems that I often use:</p>"},{"location":"chickensoft/blog/posts/2023-04-26-gdscript-vs-csharp/#test-case-1-evaluating-physics-expressions-at-runtime","title":"\ud83e\uddee Test Case 1: Evaluating Physics Expressions at Runtime","text":"<p>To test out expression evaluation, I wrote small scripts that parse math expressions using code that I typically implement inside a larger system. For this test, I did the following:</p> <ol> <li>Generate a semi-complex math expression with multiple operators, variables, and nested expressions.</li> <li>Parse the expression recursively, evaluating it with actual values for the variables.</li> <li>Run this evaluation 100,000 times.</li> </ol> <p></p> <p>Here are the results (lower is better):</p> Language Time (seconds) GDScript 8.9 C# 2.2 <p>Result: C# was 4x faster. \ud83c\udf1f</p>"},{"location":"chickensoft/blog/posts/2023-04-26-gdscript-vs-csharp/#test-case-2-state-machines","title":"\ud83c\udfb2 Test Case 2: State Machines","text":"<p>I also do a lot of state machine programming, which involves tracking state transitions that might happen multiple times per frame. To test this, I:</p> <ol> <li>Create simple state machine-like code to simulate transitioning between game states.</li> <li>The state machine includes state initialization, transition evaluation, and state updates.</li> <li>Run it for 10 million iterations.</li> </ol> <p>Here are the results (again, lower is better):</p> Language Time (seconds) GDScript 42.8 C# 1.4 <p>Result: C# was 30x faster! \ud83d\ude80</p>"},{"location":"chickensoft/blog/posts/2023-04-26-gdscript-vs-csharp/#chickensofts-c-packages","title":"\ud83d\udce6 Chickensoft's C# Packages","text":"<p>I've been working on open-source packages for Godot using C#, and they can help you leverage this performance advantage in specific scenarios without having to write everything in C#.</p> <p></p> <p>Visit Chickensoft to explore all of our packages that can help you build better games with Godot and C#!</p>"},{"location":"chickensoft/blog/posts/2023-04-26-gdscript-vs-csharp/#when-should-you-use-c","title":"\ud83e\udd14 When Should You Use C#?","text":"<p>Based on these tests and my experience, here's when you might want to consider C# for your Godot project:</p> <ul> <li>Complex games with high performance requirements</li> <li>Systems involving a lot of calculations (physics, procedural generation, etc.)</li> <li>Projects where you want to reuse existing C# libraries</li> <li>Large projects where static typing provides more stability</li> <li>Games with complex state management</li> </ul> <p>However, GDScript is still great for:</p> <ul> <li>Prototyping</li> <li>Simple games</li> <li>Most UI logic</li> <li>Scripting game objects that don't need high-performance calculations</li> <li>Projects where you want to avoid the overhead of managing a C# development environment</li> </ul>"},{"location":"chickensoft/blog/posts/2023-04-26-gdscript-vs-csharp/#the-future","title":"\ud83d\udd2e The Future","text":"<p>Godot 4 has improved GDScript's performance, but there's still a significant gap. Future versions might bring more improvements, but C# will likely maintain its performance edge for compute-intensive tasks.</p> <p>The good news is that you don't have to choose just one! You can mix GDScript and C# in the same project, using each where it makes the most sense.</p> <p>Join our Discord: https://discord.gg/gSjaPgMmYW</p> <p>If you enjoyed this post, please consider starring our GitHub repositories and following us on socials!</p>"},{"location":"chickensoft/blog/posts/2023-09-14-can-godot-deliver/","title":"Can Godot Deliver on Its Promise?","text":"<p>In the wake of Unity's latest debacle (introducing a runtime fee that will charge developers for each game installation), the Godot Engine is enjoying an unprecedented surge in attention. But will Godot be able to meet the expectations of thousands of developers looking for a Unity replacement?</p>"},{"location":"chickensoft/blog/posts/2023-09-14-can-godot-deliver/#the-godot-gold-rush","title":"\ud83c\udf1f The Godot Gold Rush","text":"<p>Unity, once beloved in the indie game development community, is having its reputation dismantled in record time. On September 12, 2023, Unity announced a new Runtime Fee that would charge developers for each time their game is installed after reaching certain thresholds. The change would apply retroactively to developers who have already published games.</p> <p>The fallout was immediate. In the 48 hours after the announcement:</p> <ul> <li>Unity's stock fell over 20%</li> <li>\"How to refund Unity Pro\" became a trending search term</li> <li>Developers began mass-migration to Discord channels, forums, and social media groups dedicated to Unity alternatives</li> </ul> <p>The largest beneficiary of this exodus? Godot Engine, the free and open-source game development platform.</p>"},{"location":"chickensoft/blog/posts/2023-09-14-can-godot-deliver/#unitys-crisis-of-trust","title":"\ud83d\uded1 Unity's Crisis of Trust","text":"<p>Unity's decision represents more than just a pricing change \u2014 it's a fundamental breach of trust with their developer community. Here's why:</p> <ol> <li> <p>Retroactively changing the rules: Developers who built their entire business models based on one payment structure are now being told the rules have changed after they've already published.</p> </li> <li> <p>Impossible tracking requirements: Unity requires tracking installations, but hasn't provided a reliable way to do this, especially for games distributed through bundles, subscriptions, or physical media.</p> </li> <li> <p>Punishing success: The fee specifically targets successful games, effectively becoming a \"success tax\" that wasn't part of the original agreement.</p> </li> <li> <p>Unclear definitions: Terms like \"installation\" remain poorly defined, creating uncertainty for developers about their potential financial obligations.</p> </li> </ol> <p>But perhaps most damaging is the way this change was communicated: suddenly, without developer consultation, and defended with corporate double-speak even as the gaming community erupted in outrage.</p>"},{"location":"chickensoft/blog/posts/2023-09-14-can-godot-deliver/#enter-godot-the-peoples-engine","title":"\ud83c\udf31 Enter Godot: The People's Engine","text":"<p>Against this backdrop, Godot is positioned as the ethical alternative. It offers:</p> <ul> <li>Truly free licensing: MIT license with no royalties, no runtime fees, and no subscription costs</li> <li>Open governance: Development is overseen by a non-profit foundation</li> <li>Transparent roadmap: Future plans are discussed openly with the community</li> <li>No investor pressure: No VCs or shareholders demanding increased monetization</li> </ul> <p>For developers burned by Unity's decisions, these factors make Godot extremely attractive. But can it actually deliver as a Unity replacement?</p>"},{"location":"chickensoft/blog/posts/2023-09-14-can-godot-deliver/#the-state-of-godot-in-2023","title":"\ud83d\udd0d The State of Godot in 2023","text":"<p>Godot 4.0 released in March 2023, bringing significant improvements:</p> <ul> <li>New rendering engine: Vulkan support, significantly improved 3D capabilities</li> <li>Better performance: Improved CPU/GPU utilization</li> <li>Enhanced physics: New physics engine with better stability</li> <li>C# improvements: Better integration of C# scripting support</li> </ul> <p>The engine has come a long way, but several challenges remain:</p> <ol> <li>Documentation gaps: While improving, documentation still has holes, especially for advanced features</li> <li>Ecosystem maturity: Asset marketplace and plugin ecosystem is still developing</li> <li>Optimization challenges: Performance optimizations often require more manual work than in Unity</li> <li>Console support: Official console export is still being developed</li> </ol>"},{"location":"chickensoft/blog/posts/2023-09-14-can-godot-deliver/#can-godot-truly-replace-unity","title":"\ud83d\udd2e Can Godot Truly Replace Unity?","text":"<p>For many developers, especially indies, Godot is already capable of meeting their needs. Games like Dome Keeper, Ex Astris, and Brotato demonstrate that commercial success is possible.</p> <p>However, certain types of developers may face challenges:</p> <ul> <li>AAA studios: May find Godot lacks some enterprise-level features</li> <li>Mobile-focused devs: Unity still offers more streamlined mobile optimization tools</li> <li>Teams with extensive Unity expertise: Face a learning curve when switching</li> </ul> <p>The good news is that Godot's development pace is accelerating. The project has seen:</p> <ul> <li>Increased funding (though still a fraction of Unity's resources)</li> <li>Growing corporate interest and sponsorship</li> <li>Expanding contributor base, especially after Unity's announcement</li> </ul>"},{"location":"chickensoft/blog/posts/2023-09-14-can-godot-deliver/#my-experience-with-godot","title":"\ud83e\uddf0 My Experience with Godot","text":"<p>I've been using Godot for several years, primarily with C#. My perspective is that:</p> <ol> <li> <p>C# support is solid but requires knowledge: Working with C# in Godot is entirely possible (and in some ways preferable), but requires understanding how the integration works.</p> </li> <li> <p>Documentation is improving: The official docs get better with each release, and community resources are filling the gaps.</p> </li> <li> <p>The editor is highly productive: Once you adapt to Godot's workflow, many tasks become more streamlined than in Unity.</p> </li> <li> <p>Community support is exceptional: The Godot community is incredibly helpful and welcoming to newcomers.</p> </li> </ol>"},{"location":"chickensoft/blog/posts/2023-09-14-can-godot-deliver/#will-godot-seize-the-moment","title":"\ud83d\ude80 Will Godot Seize the Moment?","text":"<p>Godot has an unprecedented opportunity right now. The project is seeing:</p> <ul> <li>Record numbers of GitHub stars and forks</li> <li>All-time high download numbers</li> <li>Explosion of tutorial content and community resources</li> <li>Increased financial support through donations</li> </ul> <p>But success isn't guaranteed. The project will need to:</p> <ol> <li>Rapidly improve onboarding: Make the transition for Unity developers as smooth as possible</li> <li>Address enterprise needs: Develop features needed by larger teams</li> <li>Maintain focus: Resist feature bloat while addressing critical gaps</li> <li>Leverage the community: Channel the current enthusiasm into sustainable contribution</li> </ol>"},{"location":"chickensoft/blog/posts/2023-09-14-can-godot-deliver/#the-verdict","title":"\ud83c\udfc6 The Verdict","text":"<p>Can Godot deliver on its promise to be the game engine we've been waiting for? I believe the answer is yes for many developers, eventually for most others.</p> <p>The engine is already capable enough for a wide range of games. What it lacks in features, it makes up for in freedom, flexibility, and community goodwill. And unlike proprietary engines, its open nature means that progress benefits everyone equally \u2014 there's no risk of surprise runtime fees or other unwelcome changes to the core business model.</p> <p>For those considering the switch, now is the perfect time to begin learning Godot. Even if it doesn't meet all your needs today, the pace of development suggests it will continue closing the gap with remarkable speed.</p> <p>As for Unity, they've created an opening that Godot and other alternatives will eagerly fill. The coming months will show whether Unity understands the damage they've done to their brand and developer relationships \u2014 and whether any response they offer will be enough to regain the trust they've lost.</p> <p>If you've recently switched to Godot and are looking for resources, especially for C# development, check out Chickensoft's open source packages and our Discord community.</p> <p>Join our Discord: https://discord.gg/gSjaPgMmYW</p>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/","title":"Game Architecture for Fun and Profit","text":"<p>Creating great game architecture is more important than ever. With more developers making more complex games, we need architecture that's both scalable and enjoyable to work with.</p>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#introduction","title":"\ud83d\udc4b Introduction","text":"<p>I spent most of the year developing a set of open-source packages for Godot C#. These packages were designed with game architecture in mind, and they take inspiration from:</p> <ol> <li>Functional programming</li> <li>Event-driven programming</li> <li>Object-oriented programming</li> </ol> <p>These approaches all have pros and cons, but they work well together when properly balanced.</p>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#understanding-game-architecture","title":"\ud83e\uddee Understanding Game Architecture","text":"<p>Every game has three crucial aspects to consider:</p> <ol> <li>State: What is true right now about the game and its elements</li> <li>Logic: The rules that govern how the game behaves</li> <li>Presentation: How the game is shown to the player</li> </ol> <p>Good architecture separates these concerns while also providing clear ways for them to interact.</p>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#common-architecture-patterns","title":"\ud83d\udd79\ufe0f Common Architecture Patterns","text":"<p>Several patterns are commonly used in game development:</p>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#1-the-traditional-scene-tree-approach","title":"1. The Traditional Scene Tree Approach","text":"<p>In engines like Godot, the scene tree is your native architecture. Objects in the tree are connected by:</p> <ul> <li>Parent-child relationships</li> <li>Signals/events</li> <li>Direct references</li> </ul> <p>Pros:</p> <ul> <li>Simple to understand</li> <li>Natural mapping to visual elements</li> <li>Built-in communication methods</li> </ul> <p>Cons:</p> <ul> <li>Can lead to tight coupling</li> <li>May create complex dependency webs</li> <li>Hard to unit test</li> </ul>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#2-entity-component-system-ecs","title":"2. Entity Component System (ECS)","text":"<p>A more data-oriented approach where:</p> <ul> <li>Entities are just IDs</li> <li>Components are pure data</li> <li>Systems act on entities with specific components</li> </ul> <p>Pros:</p> <ul> <li>Highly performant</li> <li>Great data locality</li> <li>Clear separation of concerns</li> </ul> <p>Cons:</p> <ul> <li>Less intuitive for many programmers</li> <li>Learning curve</li> <li>Often overkill for smaller games</li> </ul>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#3-model-view-controller-mvc-and-variants","title":"3. Model-View-Controller (MVC) and Variants","text":"<p>Separates your game into:</p> <ul> <li>Models (data)</li> <li>Views (visuals)</li> <li>Controllers (logic)</li> </ul> <p>Pros:</p> <ul> <li>Clear separation of roles</li> <li>Easier to test</li> <li>Reusable components</li> </ul> <p>Cons:</p> <ul> <li>Can be overly rigid</li> <li>Needs adaptation for games</li> <li>May add unnecessary complexity</li> </ul>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#the-future-of-game-architecture","title":"\ud83d\udd2e The Future of Game Architecture","text":"<p>The ideal game architecture blends multiple approaches:</p> <ol> <li> <p>Scene tree for visual hierarchy - Maintain the intuitive parent-child relationships for visual elements and physics</p> </li> <li> <p>Dependency injection for services - Provide access to global services without creating tight coupling</p> </li> <li> <p>State machines for complex objects - Model complex behavior with clear, manageable states</p> </li> <li> <p>Event-driven communication - Decouple systems by using events rather than direct method calls</p> </li> <li> <p>Functional core with side effects at the edges - Keep core logic pure and predictable</p> </li> </ol>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#architecture-in-practice","title":"\ud83d\udee0\ufe0f Architecture in Practice","text":"<p>In the Chickensoft Game Demo, I've implemented this hybrid architecture:</p> <ol> <li> <p>Node-based Scene Tree - Natural Godot structure with visual parent-child relationships</p> </li> <li> <p>Hierarchical State Machines - Complex objects use LogicBlocks, a hierarchical state machine implementation</p> </li> <li> <p>Dependency Injection - Systems find services through AutoInject, which searches up the scene tree</p> </li> <li> <p>Event Bus - Global events allow decoupled communication between systems</p> </li> </ol> <p>Here's a video walkthrough of the architecture:</p> <p>Watch on YouTube</p>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#architecture-checklist","title":"\ud83d\udccb Architecture Checklist","text":"<p>How can you tell if your architecture is good? Ask these questions:</p> <ul> <li>Can you change one system without breaking others?</li> <li>Is testing straightforward?</li> <li>Do new team members understand the code quickly?</li> <li>Can you add new features without rewriting existing code?</li> <li>Does the architecture help or hinder performance?</li> <li>Is the system resilient to bugs?</li> </ul>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#unit-testing-game-architecture","title":"\ud83e\uddea Unit Testing Game Architecture","text":"<p>Good architecture enables thorough testing. In our game demo, we use:</p> <ol> <li>Mocking frameworks to isolate components</li> <li>Component testing to verify behaviors</li> <li>State-based testing to ensure state machines behave correctly</li> </ol> <p>Well-tested architecture catches bugs before they reach players and makes refactoring safer.</p>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#scaling-your-architecture","title":"\ud83d\udcca Scaling Your Architecture","text":"<p>The same principles apply regardless of team size, but larger games require:</p> <ol> <li>More formalized interfaces between systems</li> <li>Better tooling to manage complexity</li> <li>Clearer documentation of architectural decisions</li> <li>Performance optimization at architectural boundaries</li> </ol>"},{"location":"chickensoft/blog/posts/2023-12-01-game-architecture/#conclusion","title":"\ud83c\udfc6 Conclusion","text":"<p>Great game architecture isn't about following a single pattern perfectly\u2014it's about creating a system that:</p> <ol> <li>Makes development enjoyable</li> <li>Scales with your project's complexity</li> <li>Facilitates collaboration</li> <li>Prevents bugs</li> <li>Performs well</li> </ol> <p>The best architecture is often invisible\u2014it simply makes everything work without getting in your way.</p> <p>Chickensoft GameDemo on GitHub</p> <p>Join our Discord: https://discord.gg/MjA6HUzzAE</p>"},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/","title":"Using Godot with C# in 2024","text":"<p>About a year and a half ago, starting a project with Godot and C# was a brave choice. There's always been a C# channel in the main Godot Discord server, but information and tutorials (let alone demos) were all but non-existent.</p> <p>Now that it's 2024, let's take a look and see how far we've come.</p>"},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/#a-lot-has-happened","title":"\ud83e\udd73 A LOT has happened","text":"<p>Throughout 2023, a lot of things happened in the game development world. Some of these changes were big news for game developers using C#, too:</p> <ul> <li>Godot 4 was released!</li> <li>Unity did things that game developers didn't like.</li> <li>Godot's C# integration was completely overhauled and ported over from Mono to the .NET SDK.</li> <li>Experimental iOS and Android mobile platform support for C# Godot games shipped in Godot 4.2.</li> <li>The Godot Forums came back in style.</li> <li>W4 Games, the company created by some of the Godot founders, raised another $15 million.</li> <li>The Godot Fund is now bringing in over $60,000/month!</li> </ul> <p>:::tip Not sure you want to use C#? Check out our blog about GDScript vs C# in Godot 4. :::</p> <p>Besides Godot's increased financial support and broader endorsements from established organizations, the Godot C# community itself continues to thrive. We've even observed a new baseline level of user activity on the Chickensoft website, beginning right about the time that Unity was introducing an installation fee.</p>"},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/#a-complete-game-demo","title":"\ud83c\udfae A Complete Game Demo","text":"<p>Late in 2023, we released an open source, fully-tested 3D platformer game demo built with Godot and C# using the awesome GDQuest assets. We'll be maintaining the demo over the next year, too, keeping it up-to-date and cleaning it up as we learn new things.</p> <p>Chickensoft GameDemo on GitHub</p> <p>Gamefromscratch covered our game demo, too \u2014 check it out below!</p> <p>Watch on YouTube</p> <p>If you want to know more about it, feel free to read our recent treatise on game architecture \u2014 it breaks the demo down and goes into painstaking detail about the technical decisions that went into it. But, bring your reading glasses \u2014 it's a long read.</p> <p>Speaking of Godot game architecture with C#, there's now also the Godot Architecture Organization Advice repository \u2014 go check it out and give it a star, too!</p> <p> This, and many other diagrams await you in our long-winded blog about game architecture.</p>"},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/#the-power-to-make-games","title":"\ud83d\udee0 The Power to Make Games","text":"<p>Chickensoft is now home to 14 open source packages designed to solve common problems you might run into if you're using Godot with C#:</p> <ul> <li>GodotEnv: Automate and standardize Godot installation, version switching, and addon management on macOS, Linux, and Windows.</li> <li>GoDotTest: Run and debug automated tests locally or from the command-line for CI/CD purposes.</li> <li>setup-godot: Install and run Godot on macOS, Linux, and Windows GitHub runners with support for Godot export templates.</li> <li>LogicBlocks: Easy-to-use, hierarchical state machines for games. It even generate state diagrams of your code for you, too.</li> <li>AutoInject: Tree-based dependency injection that lets you easily scope dependencies to specific Godot scene subtrees.</li> <li>GodotGame: Template for quickly spinning up a C# game with the Chickensoft best practices already applied.</li> <li>...and more, all easily reachable from our homepage.</li> </ul>"},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/#fun-highlights-from-2023","title":"\ud83c\udfc6 Fun Highlights from 2023","text":""},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/#terrabrush","title":"\ud83c\udfa8 TerraBrush","text":"<p>TerraBrush is a Godot map editor addon written in C# by spimort, and it features a number of incredible map-editing capabilities. Be sure to give it a star and try it out in your next 3D project!</p> <p> TerraBrush is a recently released map editor addon for Godot built in C#.</p>"},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/#layer-generator","title":"\ud83c\udf70 Layer Generator","text":"<p>Anton released GodotLayersSourceGenerator, a generator that will produce mappings of your collision layer names. He also updated BinaryBundle, a C# serialization generator for use with netcode.</p> <p>:::tip If you are looking for more C# generators, take a look at the GodotSharp.SourceGenerators project: it has generators for the scene tree, input mappings, and a ton of other stuff. :::</p>"},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/#arbitrary-color-reduction-and-palette-ordered-dithering","title":"\ud83d\udcfa Arbitrary Color Reduction and Palette Ordered Dithering","text":"<p>If you're looking to make your game a little more retro, check out Mark's Arbitrary Color Reduction and Palette Ordered Dithering shader that was released recently. Here's a video of it applied to a pseudo-isometric 3D scene:</p> <p>Watch Dithering Demo Video</p>"},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/#unidot-importer","title":"\ud83c\udf09 Unidot Importer","text":"<p>Looking to bring assets over from Unity? You can now do that easily with the Unidot Importer \u2014 it will automatically convert your <code>.unitypackage</code> assets into Godot <code>.tscn</code> scene files!</p> <p></p>"},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/#an-open-source-community","title":"\ud83d\udc24 An Open Source Community","text":"<p>If you're using Godot with C#, or interested in doing so, you are no longer alone! Many of us are actively working on creating a better game development future with Godot and C# by sharing tools, documentation, and games we create. We'd love to see you, too!</p> <p>:::note Chickensoft is a grassroots community and open source organization dedicated to furthering the use of Godot with C#. We're excited to have a community of over a 1,000 members now, and folks have graciously contributed a number of bugfixes and features to our open source packages over the last year. Come say hi! :::</p> <p>Join our Discord: https://discord.gg/MjA6HUzzAE</p>"},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/#the-state-of-game-development-with-c-and-godot-in-2024","title":"The State of Game Development with C# and Godot in 2024","text":"<p>Here are all the things we're looking forward to in 2024, and why we're more excited than ever to build games using C# and Godot.</p>"},{"location":"chickensoft/blog/posts/2024-01-01-godot-csharp-2024/#whats-new","title":"What's New?","text":"<p>The biggest news is the 1.0 release of our [Game Template][game-template]! It's a complete, MIT-licensed sample game that demonstrates all of the features we'd expect in a modern game made with Godot and C#.</p> <p>Chickensoft GameDemo on GitHub</p> <p>Check out this video of our sample game in action:</p> <p>Watch our GameDemo Video on YouTube</p> <p>Thanks for reading! Here's to an amazing 2024 full of games made with Godot and C#!</p> <p>Join our Discord: https://discord.gg/MjA6HUzzAE</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/","title":"Serialization for C# Games","text":"<p>Serialization is incredibly important to games, and often painfully difficult to implement well. Unless you just like building serializers, you may find yourself putting off developing a save/load system, especially if you need more than just a simple \"what level am I on?\" mechanism.</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#the-serialization-trap","title":"\ud83e\udea4 The Serialization Trap","text":"<p>Like compilers, game engines, video games, and operating systems, serialization is a bit of a siren's call for programming enthusiasts. It seems easy at first: just write some data to a file \u2014 done!</p> <p>But...what do you do with the data once you read it back from the file? What if the save file is outdated and your models have changed? How do you reconstruct a hierarchical state machine? What about translating saved data into polymorphic models that describe your game? And if you manage to solve that, how do you pass them through the scene tree to rehydrate your game's save state?</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#serialization-for-everyone","title":"\ud83e\uddd1\u200d\u2695\ufe0f Serialization for Everyone","text":"<p>For the last 6 months, I've been exploring answers to the questions above. I am releasing 3 major updates to existing packages, as well as 4 completely new packages that I'm really excited to share with you.</p> <p></p> <p>There's a better way to make games now \u2014 with a fully open source stack. If this sounds interesting to you, strap in \u2014 it's going to be a long ride.</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#what-makes-a-good-save-system","title":"\ud83d\udcbe What Makes a Good Save System?","text":"<p>A good save system, in my opinion, should meet the following criteria:</p> <ul> <li>\ud83d\udd2e Works when compiled ahead-of-time. A general purpose serialization toolchain needs to work on the lowest common denominator of platforms \u2014 iOS.</li> </ul> <p>AOT is a steep requirement for serialization, as it essentially condemns you to generating metadata about types at build time.</p> <ul> <li> <p>\ud83d\udd18 Opt-in by default. Sometimes you want to extend a non-serializable class that you don't control and make it serializable.</p> </li> <li> <p>\u2935\ufe0f Polymorphic deserialization. It needs to be easy to deserialize explicit implementations of an abstract type.</p> </li> <li> <p>\ud83d\udd04 Collections. Even if you don't intend to support generic types, properly implementing collections is non-trivial.</p> </li> <li> <p>\ud83d\udce6 Versioning. Models change as a game evolves, and you don't want to break existing save files.</p> </li> <li> <p>\ud83e\ude9d Serialization Hooks \u2014 for types with custom serialization logic or types outside the assembly whose metadata can't be generated.</p> </li> </ul> <p>Now that we know what a good serialization system looks like, let's talk about how its done.</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#why-make-a-serializer","title":"\ud83d\ude4b\u200d\u2640\ufe0f Why Make a Serializer? <sup>1</sup>","text":"<p>The .NET ecosystem has slowly begun to embrace an AOT-friendly world, and System.Text.Json can now generate metadata about types at build time.</p> <p>The new serialization system we've introduced is built on top of System.Text.Json. Because of this shared foundation, it can interop seamlessly with existing generated JSON contexts and converters.</p> <p>Why build a new serializer on top of System.Text.Json if it can already do AOT serialization just fine? Unfortunately, System.Text.Json has a few pain points:</p> <ul> <li> <p>Doesn't help with versioning.</p> </li> <li> <p>Derived types are painful \u2014 you have to manually register them on the base type.</p> </li> </ul> <p>Essentially, you have to keep a registry of all derived types in a place unrelated to the type itself. Manually tracking types is incredibly error-prone and hostile to refactoring type hierarchies \u2014 a common activity if you're using hierarchial state machines.</p> <ul> <li>Doesn't support serialization hooks. You have to make a custom converter for every type that needs custom serialization logic.</li> </ul> <p>Since we are designing for a specific use case \u2014 saving and loading game files \u2014 we can make a solution that's tailored to exactly that. Plus, we can still leverage the amazing foundation that System.Text.Json provides.</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#generating-metadata-at-build-time","title":"\ud83d\udd2e Generating Metadata at Build Time","text":"<p>If we're going to make an AOT-friendly serialization system, we're going to need metadata about types. We've already established that the metadata generated by System.Text.Json requires us to write rather unfriendly code that is going to be a pain to refactor, so we can't rely on the System.Text.Json source generator.</p> <p>We're going to have to make our own.</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#introducing-the-introspection-generator","title":"\ud83d\udd2e Introducing the Introspection Generator","text":"<p>The new Introspection generator is now the backbone of all the major Chickensoft libraries that need metaprogramming capabilities. It automatically generates a registry of every type that is visible from the global scope, including nested types.</p> <p>Chickensoft.Introspection on GitHub</p> <code>TypeRegistry.g.cs</code> Example  An abbreviated version of the entries in a generated type registry. Not particularly interesting unless you just like writing serializers.  :::info The generic form of `Activator.CreateInstance` works well (and is performant) in both AOT and JIT scenarios. I verified this by emailing Michal Strehovsk\u00fd, the .NET compiler engineer [who overhauled it](https://x.com/MStrehovsky/status/1231673490551582721). :::  <pre><code>[typeof(PartialModel)] = new IdentifiableTypeMetadata(\"PartialModel\", (r) =&gt; r.Receive&lt;PartialModel&gt;(), () =&gt; System.Activator.CreateInstance&lt;PartialModel&gt;(), new PartialModel.MetatypeMetadata(), \"multiple_partial_definitions\", 1),\n[typeof(PropertyModel)] = new AbstractIntrospectiveTypeMetadata(\"PropertyModel\", (r) =&gt; r.Receive&lt;PropertyModel&gt;(), new PropertyModel.MetatypeMetadata()),\n[typeof(SomeType)] = new IntrospectiveTypeMetadata(\"SomeType\", (r) =&gt; r.Receive&lt;SomeType&gt;(), () =&gt; System.Activator.CreateInstance&lt;SomeType&gt;(), new SomeType.MetatypeMetadata(), 1),\n[typeof(StaticPropertyIsSkipped)] = new IntrospectiveTypeMetadata(\"StaticPropertyIsSkipped\", (r) =&gt; r.Receive&lt;StaticPropertyIsSkipped&gt;(), () =&gt; System.Activator.CreateInstance&lt;StaticPropertyIsSkipped&gt;(), new StaticPropertyIsSkipped.MetatypeMetadata(), 1),\n[typeof(TraditionalNamespace.A)] = new ConcreteTypeMetadata(\"A\", (r) =&gt; r.Receive&lt;TraditionalNamespace.A&gt;(), () =&gt; System.Activator.CreateInstance&lt;TraditionalNamespace.A&gt;()),\n[typeof(TraditionalNamespace.A.AA)] = new ConcreteTypeMetadata(\"AA\", (r) =&gt; r.Receive&lt;TraditionalNamespace.A.AA&gt;(), () =&gt; System.Activator.CreateInstance&lt;TraditionalNamespace.A.AA&gt;()),\n</code></pre> <p>Better yet, the new Introspection generator is designed for performance: it generates all of its data without using any analyzer symbol data \u2014 just the syntax tree \u2014 making it pretty dang fast. It also deprecates our previous generator, SuperNodes, that was not as capable or performant.</p> <p>You can read all about it on the Introspection repository. The general idea is that it allows you to tag types that are introspective with the <code>[Meta]</code> attribute. Introspective types have additional metadata generated about them, including their attribute information, their properties, and the attributes on their properties, among other things.</p> <code>IntrospectiveType.g.cs</code> Example  An abbreviated version of the generated metadata for an introspective type.  <pre><code>  [ExcludeFromCodeCoverage]\n  public MixinBlackboard MixinState { get; } = new();\n\n  [ExcludeFromCodeCoverage]\n  public IMetatype Metatype =&gt; ((IIntrospectiveTypeMetadata)Types.Graph.GetMetadata(typeof(IntrospectiveType))).Metatype;\n\n  public class MetatypeMetadata : IMetatype {\n    [ExcludeFromCodeCoverage]\n    public System.Type Type =&gt; typeof(IntrospectiveType);\n    [ExcludeFromCodeCoverage]\n    public bool HasInitProperties { get; } = true;\n\n    [ExcludeFromCodeCoverage]\n    public IReadOnlyList&lt;PropertyMetadata&gt; Properties { get; } = new List&lt;PropertyMetadata&gt;() {\n      new PropertyMetadata(\n        Name: \"Address\",\n        IsInit: false,\n        IsRequired: false,\n        Getter: (object obj) =&gt; ((IntrospectiveType)obj).Address,\n        Setter: (object obj, object? value) =&gt; ((IntrospectiveType)obj).Address = (string)value,\n        GenericType: new GenericType(\n          OpenType: typeof(string),\n          ClosedType: typeof(string),\n          Arguments: System.Array.Empty&lt;GenericType&gt;(),\n          GenericTypeGetter: receiver =&gt; receiver.Receive&lt;string&gt;(),\n          GenericTypeGetter2: default\n        ),\n        Attributes: new Dictionary&lt;System.Type, System.Attribute[]&gt;() {\n          [typeof(TagAttribute)] = new System.Attribute[] {\n            new TagAttribute(\"address\")\n          }\n        }\n      ),\n      new PropertyMetadata(\n        Name: \"Age\",\n        IsInit: true,\n        IsRequired: true,\n        Getter: (object obj) =&gt; ((IntrospectiveType)obj).Age,\n        Setter: null,\n        GenericType: new GenericType(\n          OpenType: typeof(int),\n          ClosedType: typeof(int),\n          Arguments: System.Array.Empty&lt;GenericType&gt;(),\n          GenericTypeGetter: receiver =&gt; receiver.Receive&lt;int&gt;(),\n          GenericTypeGetter2: default\n        ),\n        Attributes: new Dictionary&lt;System.Type, System.Attribute[]&gt;() {\n          [typeof(TagAttribute)] = new System.Attribute[] {\n            new TagAttribute(\"age\")\n          }\n        }\n      ),\n      new PropertyMetadata(\n        Name: \"Description\",\n        IsInit: true,\n        IsRequired: false,\n        Getter: (object obj) =&gt; ((IntrospectiveType)obj).Description,\n        Setter: null,\n        GenericType: new GenericType(\n          OpenType: typeof(string),\n          ClosedType: typeof(string),\n          Arguments: System.Array.Empty&lt;GenericType&gt;(),\n          GenericTypeGetter: receiver =&gt; receiver.Receive&lt;string&gt;(),\n          GenericTypeGetter2: default\n        ),\n        Attributes: new Dictionary&lt;System.Type, System.Attribute[]&gt;() {\n          [typeof(TagAttribute)] = new System.Attribute[] {\n            new TagAttribute(\"description\")\n          }\n        }\n      ),\n      new PropertyMetadata(\n        Name: \"Name\",\n        IsInit: true,\n        IsRequired: true,\n        Getter: (object obj) =&gt; ((IntrospectiveType)obj).Name,\n        Setter: null,\n        GenericType: new GenericType(\n          OpenType: typeof(string),\n          ClosedType: typeof(string),\n          Arguments: System.Array.Empty&lt;GenericType&gt;(),\n          GenericTypeGetter: receiver =&gt; receiver.Receive&lt;string&gt;(),\n          GenericTypeGetter2: default\n        ),\n        Attributes: new Dictionary&lt;System.Type, System.Attribute[]&gt;() {\n          [typeof(TagAttribute)] = new System.Attribute[] {\n            new TagAttribute(\"name\")\n          }\n        }\n      )\n    };\n\n    [ExcludeFromCodeCoverage]\n    public IReadOnlyDictionary&lt;System.Type, System.Attribute[]&gt; Attributes { get; } = new Dictionary&lt;System.Type, System.Attribute[]&gt;() {\n      [typeof(IdAttribute)] = new System.Attribute[] {\n        new IdAttribute(\"init_args_model\")\n      },\n      [typeof(MetaAttribute)] = new System.Attribute[] {\n        new MetaAttribute()\n      }\n    };\n\n    [ExcludeFromCodeCoverage]\n    public IReadOnlyList&lt;System.Type&gt; Mixins { get; } = new List&lt;System.Type&gt;() {\n    };\n\n    [ExcludeFromCodeCoverage]\n    public IReadOnlyDictionary&lt;System.Type, System.Action&lt;object&gt;&gt; MixinHandlers { get; } = new Dictionary&lt;System.Type, System.Action&lt;object&gt;&gt;() {\n    };\n\n\n    [ExcludeFromCodeCoverage]\n    public object Construct(IReadOnlyDictionary&lt;string, object?&gt;? args = null) {\n      args = args ?? throw new System.ArgumentNullException(nameof(args), \"Constructing IntrospectiveType requires init args.\");\n      return new IntrospectiveType() {\n        Address = args.ContainsKey(\"Address\") ? (string)args[\"Address\"] : default!,\n        Age = args.ContainsKey(\"Age\") ? (int)args[\"Age\"] : default!,\n        Description = args.ContainsKey(\"Description\") ? (string)args[\"Description\"] : default!,\n        Name = args.ContainsKey(\"Name\") ? (string)args[\"Name\"] : default!\n      };\n    }\n    [ExcludeFromCodeCoverage]\n    public override bool Equals(object obj) =&gt; true;\n    [ExcludeFromCodeCoverage]\n    public override int GetHashCode() =&gt; base.GetHashCode();\n  }\n</code></pre> <p>You don't have to fully understand the generated introspection data to appreciate it. Basically, it makes all the stuff you'd ever need to write a decently polymorphic serialization system.</p> <p>\u2705 Now any serializer we build on top of this will work when compiled ahead of time \u2014 done! Not so bad, right?</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#introducing-the-serialization-system","title":"\ud83d\udce6 Introducing the Serialization System","text":"<p>The new Serialization system builds off the Introspection generator, allowing you to define serializable types with relative ease.</p> <p>Chickensoft.Serialization on GitHub</p> <p>It isn't as powerful as the System.Text.Json generators, but it's tailored for writing simple, refactor-friendly code.</p> <p>Here's what a serializable game model looks like.</p> <pre><code>using Chickensoft.Introspection;\nusing Chickensoft.Serialization;\nusing Godot;\n\n[Meta, Id(\"player_data\")]\npublic partial record PlayerData {\n  [Save(\"global_transform\")]\n  public required Transform3D GlobalTransform { get; init; }\n  [Save(\"state_machine\")]\n  public required PlayerLogic StateMachine { get; init; }\n  [Save(\"velocity\")]\n  public required Vector3 Velocity { get; init; }\n}\n</code></pre> <p>:::tip The <code>[Id]</code> attribute tells the Introspection generator to generate additional metadata on top of the additional introspection data specific to \"identifiable\" types. The Serialization system and Introspection generator were designed in tandem, so they work together seamlessly, even though the Introspection generator has no knowledge of serialization. It just generates metadata. :::</p> <p>\u2705 Note how the serialization system is opt-in: just add the <code>[Save]</code> attribute and specify a json key name for the properties you wish to persist!</p> <p>\u2705 It also works with collections. It provides support for the only 3 collections you should ever need when working with JSON: <code>HashSet&lt;T&gt;</code>, <code>List&lt;T&gt;</code>, <code>Dictionary&lt;TKey, TValue&gt;</code>. If you need something else, you're doing it wrong. (Or you can just use the System.Text.Json generator and make a serialization context, if you must get fancy).</p> <p>\u2705 Oh, and it works with inheritance and abstract types, too. Check the Serialization readme for more usage details.</p> <p>\u2705 Oh, and of course \u2014 versioning! Here's what a versioned model looks like.</p> <pre><code>[Meta, Id(\"log_entry\")]\npublic abstract partial class LogEntry : SystemLogEntry { }\n\n[Meta, Version(1)]\npublic partial class LogEntry1 : LogEntry, IOutdated {\n  [Save(\"text\")]\n  public required string Text { get; init; }\n\n  [Save(\"type\")]\n  public required string Type { get; init; }\n\n  public object Upgrade(IReadOnlyBlackboard deps) =&gt; new LogEntry2() {\n    Text = Text,\n    Type = Type switch {\n      \"info\" =&gt; LogType.Info,\n      \"warning\" =&gt; LogType.Warning,\n      \"error\" or _ =&gt; LogType.Error,\n    }\n  };\n}\n\npublic enum LogType {\n  Info,\n  Warning,\n  Error\n}\n\n[Meta, Version(2)]\npublic partial class LogEntry2 : LogEntry {\n  [Save(\"text\")]\n  public required string Text { get; init; }\n\n  [Save(\"type\")]\n  public required LogType Type { get; init; }\n}\n</code></pre> <p>The serialization system can even upgrade your out of date models while they're being deserialized, ensuring you never see an out-of-date type in your game logic.</p> <p>\u2705 Finally, you can also implement custom serialization hooks on types that wish to customize how they are serialized. They have access to their JSON node, and can even return an entirely different object if they wish (as long as it is a derived type of the type being deserialized).</p> <pre><code>  [Meta, Id(\"custom_serializable\")]\n  public partial class CustomSerializable : ICustomSerializable {\n    public int Value { get; set; }\n\n    public object OnDeserialized(\n      IdentifiableTypeMetadata metadata,\n      JsonObject json,\n      JsonSerializerOptions options\n    ) {\n      Value = json[\"value\"]?.GetValue&lt;int&gt;() ?? -1;\n\n      return this;\n    }\n\n    public void OnSerialized(\n      IdentifiableTypeMetadata metadata,\n      JsonObject json,\n      JsonSerializerOptions options\n    ) {\n      // Even though our property doesn't have the [Save] attribute, we\n      // can save it manually.\n      json[\"value\"] = Value;\n    }\n  }\n</code></pre> <p>\ud83e\udd73 Now we've met all of our serialization requirements.</p> <p>\u2728 But wait, there's more! A LOT more.</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#godot-specific-serialization","title":"\ud83e\udd16 Godot-Specific Serialization","text":"<p>We also need to be able to serialize Godot-specific types, like transforms, vectors, etc. Fortunately, there's a new package containing a few System.Text.Json converters that can convert Godot types to JSON and back.</p> <p>Chickensoft.Serialization.Godot on GitHub</p> <p>It only supports a handful of types right now, so please \u2014 PLEASE \u2014 contribute to it if you can!</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#introducing-savefilebuilder","title":"\ud83d\udc7d Introducing SaveFileBuilder","text":"<p>Now that we can define beautiful, serializable models, how do we extract data from disparate nodes across the scene tree, and how do we return it to the relevant nodes (or create them) when we load the game?</p> <p>Chickensoft SaveFileBuilder on GitHub</p> <p>Meet SaveFileBuilder. It allows you to define a <code>SaveFile</code> as a tree of <code>SaveChunks</code>. Each <code>SaveChunk</code> may have its own children chunks. You can access each child chunk by its type to recursively construct the save file (or load it).</p> <p>AutoInject should be used to find the nearest parent save chunk in the scene tree so that the child chunk can add itself to the parent.</p> <pre><code>SaveFile = new SaveFile&lt;GameData&gt;(\n  root: new SaveChunk&lt;GameData&gt;(\n    onSave: (chunk) =&gt; {\n      // Use root chunk to get child chunks that were added to us\n      // lower in the scene tree.\n      var gameData = new GameData() {\n        MapData = chunk.GetChunkSaveData&lt;MapData&gt;(),\n        PlayerData = chunk.GetChunkSaveData&lt;PlayerData&gt;(),\n        PlayerCameraData = chunk.GetChunkSaveData&lt;PlayerCameraData&gt;()\n      };\n\n      return gameData;\n    },\n    onLoad: (chunk, data) =&gt; {\n      // Break up the game data and send it to the child chunks so that\n      // they can load the data into the nodes they belong to.\n      chunk.LoadChunkSaveData(data.MapData);\n      chunk.LoadChunkSaveData(data.PlayerData);\n      chunk.LoadChunkSaveData(data.PlayerCameraData);\n    }\n  ),\n  onSave: async (GameData data) =&gt; {\n    // Save the game data to disk.\n    var json = JsonSerializer.Serialize(data, JsonOptions);\n    await FileSystem.File.WriteAllTextAsync(SaveFilePath, json);\n  },\n  onLoad: async () =&gt; {\n    // Load the game data from disk.\n    if (!FileSystem.File.Exists(SaveFilePath)) {\n      GD.Print(\"No save file to load :'(\");\n      return null;\n    }\n\n    var json = await FileSystem.File.ReadAllTextAsync(SaveFilePath);\n    return JsonSerializer.Deserialize&lt;GameData&gt;(json, JsonOptions);\n  }\n);\n</code></pre> <p>In the future, this can be expanded on by creating an async variety. Asynchronicity would allow you to define save chunks that can split loading and saving into multiple operations, streamlining the most complex save scenarios imaginable.</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#serializing-hierarchical-state-machines","title":"\ud83d\udca1 Serializing Hierarchical State Machines","text":"<p>LogicBlocks, our hierarchical state machine implementation, is now fully serializable, thanks to the version 5 update that was just released. It integrates seamlessly with the new Introspection generator and Serialization system.</p> <p>Chickensoft LogicBlocks on GitHub</p> <p>LogicBlocks 5 will now automatically preallocate states when constructed, thanks to the generated metadata that allows it to see every possible state ahead of time.</p> <p>:::info Unrelated, but the new performance updates LogicBlocks 5 receives also eliminates runtime memory allocations, except in scenarios where the number of inputs or input types exceeds the input buffer size. :::</p> <pre><code>[Meta, Id(\"serializable_logic\")]\n[LogicBlock(typeof(State), Diagram = true)]\npublic partial class MyLogicBlock : LogicBlock&lt;MyLogicBlock.State&gt; {\n  public override Transition GetInitialState() =&gt; To&lt;State.PoweredOff&gt;();\n\n  [Meta]\n  public abstract partial record State : StateLogic&lt;State&gt; {\n    [Meta, Id(\"serializable_logic_state_off\")]\n    public partial record PoweredOff : State;\n\n    [Meta, Id(\"serializable_logic_state_on\")]\n    public partial record PoweredOn : State;\n\n    [Meta, Id(\"serializable_logic_versioned_state\")]\n    public abstract partial record VersionedState : State;\n\n    [Meta, Version(1)]\n    public partial record Version1 : VersionedState;\n\n    [Meta, Version(2)]\n    public partial record Version2 : VersionedState;\n  }\n}\n</code></pre> <p>Oh \u2014 and LogicBlocks now has an all new documentation site! There's never been a better time to embrace the magic and rigor of statecharts.</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#a-better-autoinject","title":"\ud83d\udc89 A Better AutoInject","text":"<p>AutoInject is our node-based dependency injection system. It allows you to find dependencies by searching ancestor nodes for the first node that has the dependency you're looking for. It's as simple as it sounds, at least in theory (the devil is in the implementation details).</p> <p>Chickensoft AutoInject on GitHub</p> <p>Previously, AutoInject was built on top of SuperNodes. Now that SuperNodes has been deprecated and replaced with the new Introspection generator, the PowerUps package (a set of mixins designed to work with AutoInject and SuperNodes) has also been deprecated. Fortunately, all of its functionality now lives inside AutoInject.</p> <p>Like before, you can use the new Introspection generator to apply mixins. But, it's even simpler now \u2014 all of the mixins available in AutoInject can be applied at once:</p> <pre><code>// Apply all of the AutoInject mixins at once:\n[Meta(typeof(IAutoNode))]\npublic partial class MyNode : Node { }\n</code></pre> <p>That one little line above allows you to automatically bind nodes to properties, inject dependencies, provide dependencies, and use .NET-style notification callbacks and get additional lifecycle notifications that help with unit testing nodes, if that's your jam. Be sure to checkout the AutoInject repository for more details.</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#saving-loading-in-the-game-demo","title":"\ud83d\udd79\ufe0f Saving &amp; Loading in the Game Demo","text":"<p>Of course, no long-winded blog announcing a bunch of new packages would be complete without a demo. The Chickensoft Game Demo has been updated to version 3, and now includes full state persistence and restoration, thanks to all these new tools.</p> <p>Chickensoft GameDemo on GitHub</p> <p>If you're still fuzzy on the details, go check out the code and take a closer look. There's also nearly 300 unit tests that can help show you how any particularly part of the code works, too.</p>"},{"location":"chickensoft/blog/posts/2024-06-11-serialization-for-csharp-games/#conclusion","title":"Conclusion","text":"<p>We'll close by celebrating the fact that Chickensoft has now reached a new layer of the gamedev hierarchy of needs: serialization. Now we can start solving the real problems.</p> <p></p> <p>If you made it this far, thanks for reading \u2014 and happy serializing!</p> <p>Join our Discord: https://discord.gg/MjA6HUzzAE</p> <ol> <li> <p>It's actually too late. I've already made one.\u00a0\u21a9</p> </li> </ol>"},{"location":"chickensoft/blog/posts/2025-02-18-display-scaling/","title":"Solving Game Display Scaling","text":"<p>The last thing most gamedevs want to deal with is resolving the complexities of scaling a UI to look good on any screen, but a good scaling system is essential to creating a great player experience.</p>"},{"location":"chickensoft/blog/posts/2025-02-18-display-scaling/#why-scaling-matters","title":"\ud83d\udccf Why Scaling Matters","text":"<p>In game development, display scaling can be a source of unexpected complexity that distracts from the core gameplay experience you're trying to create. But ignoring it leads to poor player experiences, especially in our multi-device world.</p> <p>Players expect your game to look good whether they're using:</p> <ul> <li>A 13\" laptop with a resolution of 1280x800</li> <li>A 30\" 4K monitor at 3840x2160</li> <li>A mobile phone with a small but high DPI screen</li> <li>A Steam Deck or other handheld gaming device</li> <li>Their TV via Steam's Big Picture mode</li> </ul> <p>The challenge is to create a single interface that adapts to all these scenarios while maintaining the intended look and feel of your game. This is particularly important for:</p> <ol> <li>Pixel art games that need precise scaling to maintain crisp visuals</li> <li>Text elements that need to remain legible across devices</li> <li>Interactive elements that need to remain comfortably clickable</li> </ol>"},{"location":"chickensoft/blog/posts/2025-02-18-display-scaling/#the-unity-approach","title":"\ud83d\udd0d The Unity Approach","text":"<p>If you're coming from Unity, you might be familiar with their Canvas Scaler component, which offers three scaling modes:</p> <ul> <li>Constant Pixel Size: UI elements maintain the same pixel size regardless of screen resolution</li> <li>Scale With Screen Size: UI scales based on a reference resolution</li> <li>Constant Physical Size: UI elements maintain the same physical size regardless of screen size and DPI</li> </ul> <p>Each approach has its own trade-offs in terms of flexibility, ease of implementation, and final visual quality.</p>"},{"location":"chickensoft/blog/posts/2025-02-18-display-scaling/#a-godot-solution","title":"\ud83c\udfae A Godot Solution","text":"<p>I've created a scaling system for Godot that takes inspiration from Unity's approach while adding some additional flexibility. This system lives in a class called <code>DisplayScaler</code>, which you can drop into any Godot project.</p> <p></p> <p>The <code>DisplayScaler</code> class offers multiple scaling options:</p> <ul> <li>Fixed: Similar to Unity's Constant Pixel Size</li> <li>Fit Width: Scales the UI to fit the width of the screen</li> <li>Fit Height: Scales the UI to fit the height of the screen</li> <li>Expand: Takes the smaller of width and height scaling (ensures everything fits)</li> <li>Shrink: Takes the larger of width and height scaling (ensures the screen is filled)</li> </ul>"},{"location":"chickensoft/blog/posts/2025-02-18-display-scaling/#implementation-details","title":"\ud83d\udca1 Implementation Details","text":"<p>Here's the core of the implementation:</p> <pre><code>public partial class DisplayScaler : Node {\n  [Export] public DisplayScalingMode ScalingMode { get; set; } = DisplayScalingMode.Fit;\n  [Export] public Vector2I ReferenceResolution { get; set; } = new(1280, 720);\n  [Export] public bool PixelPerfect { get; set; } = true;\n  [Export] public float ReferenceScale { get; set; } = 1.0f;\n  [Export] public float MinScale { get; set; } = 0.25f;\n  [Export] public float MaxScale { get; set; } = 8.0f;\n\n  public override void _Ready() =&gt; UpdateScale();\n\n  public override void _Process(double delta) =&gt; UpdateScale();\n\n  private void UpdateScale() {\n    var viewport = GetViewport();\n    var windowSize = viewport.GetVisibleRect().Size;\n\n    float scale = ComputeScale(windowSize);\n\n    if (PixelPerfect) {\n      scale = Mathf.Floor(scale);\n      scale = Mathf.Max(1.0f, scale);\n    }\n\n    scale = Mathf.Clamp(scale, MinScale, MaxScale);\n    viewport.GetWindow().ContentScaleFactor = scale;\n  }\n\n  private float ComputeScale(Vector2 windowSize) {\n    var xScale = windowSize.X / ReferenceResolution.X;\n    var yScale = windowSize.Y / ReferenceResolution.Y;\n\n    return ScalingMode switch {\n      DisplayScalingMode.Fixed =&gt; ReferenceScale,\n      DisplayScalingMode.FitWidth =&gt; xScale * ReferenceScale,\n      DisplayScalingMode.FitHeight =&gt; yScale * ReferenceScale,\n      DisplayScalingMode.Fit =&gt; Mathf.Min(xScale, yScale) * ReferenceScale,\n      DisplayScalingMode.Fill =&gt; Mathf.Max(xScale, yScale) * ReferenceScale,\n      _ =&gt; ReferenceScale\n    };\n  }\n}\n\npublic enum DisplayScalingMode {\n  Fixed,\n  FitWidth,\n  FitHeight,\n  Fit,\n  Fill\n}\n</code></pre> <p>With this system in place, you can easily adjust how your UI scales based on the specific needs of your game.</p>"},{"location":"chickensoft/blog/posts/2025-02-18-display-scaling/#integration-with-ui-systems","title":"\ud83e\udde9 Integration with UI Systems","text":"<p>To make the most of this scaling system, you'll want to design your UI with responsiveness in mind:</p> <p></p> <ul> <li>Use anchors and margins to position UI elements relative to their container</li> <li>Group elements logically with containers that can expand or contract</li> <li>Test regularly on different resolutions to catch issues early</li> </ul>"},{"location":"chickensoft/blog/posts/2025-02-18-display-scaling/#lessons-from-the-field","title":"\ud83c\udf93 Lessons From the Field","text":"<p>Based on my experience implementing UI scaling across multiple projects, here are some additional tips:</p> <ol> <li>Separate your UI layer: Keep your game world rendering separate from your UI rendering</li> <li>Consider multiple UI layers: Sometimes you want elements that scale differently (e.g., debug info that's always the same size)</li> <li>Don't forget about input: If you're scaling your display, make sure your input handling scales accordingly</li> </ol>"},{"location":"chickensoft/blog/posts/2025-02-18-display-scaling/#wrapping-up","title":"\ud83c\udfaf Wrapping Up","text":"<p>Display scaling doesn't have to be a headache. With a systematic approach like the one outlined here, you can create a UI that looks great on screens of all sizes without getting bogged down in complex edge cases.</p> <p>Remember, the goal is to spend less time fighting with your UI and more time creating an awesome game experience!</p> <p>Check out the DisplayScaler on GitHub</p> <p>Join our Discord: https://discord.gg/MjA6HUzzAE</p>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/","title":"#\ufe0f\u20e3 How C# Works in Godot","text":"<p>Understanding how C# is integrated into Godot can provide valuable context that makes it easier to design, understand, and debug games and applications built with Godot.</p>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/#the-basics","title":"\ud83d\udd8d\ufe0f The Basics","text":"<p>When you first add a C# script to a node, Godot makes a few modifications to your project to support C# development.</p> <p></p> <p>First, Godot edits the <code>project.godot</code> file to include a reference to the GodotSharp module.</p> <pre><code>[application]\nconfig/features=PackedStringArray(\"4.3\", \"C#\", \"Mobile\")\n</code></pre> <p>Godot also creates a .NET solution file and C# project file alongside your <code>project.godot</code> file in your project's root directory. If your project is called <code>MyGame</code>, you will notice <code>MyGame.sln</code> and <code>MyGame.csproj</code> files. The solution is already configured to point to the C# project file.</p> <p>At this point, you are free to add as many C# scripts and code files as you like, and they will automatically be picked up and compiled whenever you build the project by running <code>dotnet build</code> or clicking the build icon in Godot.</p> <p></p>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/#namespaces","title":"\u270f\ufe0f Namespaces","text":"<p>Godot does not care what namespaces you use (if any) in your code files, even for scene scripts. You are free to nest namespaces as much as you like (or not use them at all).</p>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/#how-godot-hosts-managed-assemblies","title":"\ud83d\uddbc\ufe0f How Godot Hosts Managed Assemblies","text":"<p>Godot is a native application written largely in C++. To run C# code, Godot leverages Microsoft's <code>nethost</code> and <code>hostfxr</code> libraries which allow native applications to load and execute .NET assemblies. For more background on this, check out Microsoft's guide aptly titled \"Write a custom .NET host to control the .NET runtime from your native code\"</p>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/#engine-interop","title":"\ud83e\udd1d Engine Interop","text":"<p>Godot uses custom C# source generators to generate the interop bindings between your managed C# code and the engine's native code. When you write a Godot node script class, you can actually see what Godot is generating by adding settings to your <code>.csproj</code> file which instruct .NET to emit the generated code to a directory. This is generally recommended and allows you to dig into generated code.</p> <pre><code>&lt;Project Sdk=\"Godot.NET.Sdk/4.3.0\"&gt;\n  &lt;PropertyGroup&gt;\n    &lt;!-- To show generated files --&gt;\n    &lt;EmitCompilerGeneratedFiles&gt;true&lt;/EmitCompilerGeneratedFiles&gt;\n    &lt;CompilerGeneratedFilesOutputPath&gt;.generated&lt;/CompilerGeneratedFilesOutputPath&gt;\n    &lt;!-- ... --&gt;\n</code></pre> <p>If you go looking to see where these source generators are included, you won't find them. Instead, they're implicitly included with <code>Godot.NET.Sdk</code> referenced at the top of your project's <code>.csproj</code> file:</p> <pre><code>&lt;Project Sdk=\"Godot.NET.Sdk/4.3.0\"&gt;\n</code></pre> <p>Note that sdk's like <code>Godot.NET.Sdk</code> are just special nuget packages which declare MSBuild targets and properties, package references, etc. When your project is based off an sdk, it inherits the sdk's configuration.</p>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/#versioning","title":"\ud83c\udf0f Versioning","text":"<p>You can omit the version of the sdk from the <code>&lt;Project&gt;</code> tag and use a <code>global.json</code> file in your project root instead (which is how the Chickensoft projects are structured).</p> <pre><code>&lt;Project Sdk=\"Godot.NET.Sdk\"&gt;\n</code></pre> <p>This makes it easy to automate package updates. Godot will sometimes try to add the version back after opening the editor, but you can simply discard those changes in source control.</p> <p>Here's an example of a <code>global.json</code> file, taken from the Chickensoft GameDemo.</p> <pre><code>{\n  \"msbuild-sdks\": {\n    \"Godot.NET.Sdk\": \"4.3.0\"\n  },\n  \"sdk\": {\n    \"rollForward\": \"major\",\n    \"version\": \"8.0.401\"\n  }\n}\n</code></pre>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/#packages-assemblies-and-external-code","title":"\ud83e\udde9 Packages, Assemblies and External Code","text":"<p>Because C# Godot projects use a standard solution and project file, you can reference external packages and assemblies in your project the same way you would in a vanilla C# project.</p> <p>NuGet is Microsoft's package manager and package ecosystem hosting platform. Hundreds of thousands of packages exist for C# and can be easily added to most projects. For more on NuGet's background, you can read Microsoft's overview of NuGet.</p> <p>Historically, <code>nuget</code> was a standalone command-line tool and package hosting site. Over time, nuget command line tool functionality has mostly been integrated into the <code>dotnet</code> CLI tool. You will rarely, if ever, need to use the <code>nuget</code> command-line tool directly. Also worth mentioning is that the nuget command line tool only runs on Windows, whereas the <code>dotnet</code> CLI is cross-platform.</p>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/#external-code","title":"\ud83d\udce6 External Code","text":"<p>Plain C# packages which target <code>netstandard</code> or a compatible target framework can be easily added to your project with <code>dotnet add package &lt;package-name&gt;</code> or by editing the <code>.csproj</code> file directly and running <code>dotnet restore</code>.</p> <pre><code>  &lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"Chickensoft.Serialization\" Version=\"2.0.0\" /&gt;\n    &lt;!-- ... --&gt;\n</code></pre> <p>External nuget packages which use the Godot API and have the same (or compatible) <code>GodotSharp</code> version as your game's <code>Godot.NET.Sdk</code> can be added and referenced from your game's project in the same way.</p> <p>You can also include source generator packages by including the additional tags needed for .NET to understand them as source generators. This allows you to benefit from powerful metaprogramming tools, like the ones Chickensoft provides.</p> <pre><code>&lt;PackageReference Include=\"Chickensoft.Introspection.Generator\" Version=\"2.0.0\" PrivateAssets=\"all\" OutputItemType=\"analyzer\" /&gt;\n</code></pre>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/#script-assets-and-code-files","title":"\ud83d\ude80 Script Assets and Code Files","text":"<p>When creating a C# Godot project, it's helpful to devise terminology that allows us to classify the C# code in a game into two potential \"categories\":</p> <ul> <li>C# script assets (scripts added to a Godot scene or resource)</li> <li>C# code files (plain C# code files not referenced directly by the engine)</li> </ul> <p>In general, a \"script\" is a code file which is referenced somewhere in the engine's other files (like Godot's <code>.tscn</code> scene files). When referenced from a scene or resource, the code file should be considered a script asset rather than just a loose C# file sitting somewhere in your project. Because Godot's references can be brittle at times, it's important to rename and move files in your project from within the Godot editor to avoid breaking references.</p> <p>On the other hand, plain C# code files you add to your project that aren't referenced in the engine should not be considered assets. This distinction becomes important when you wish to modularize your project.</p>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/#modularizing-your-game","title":"\ud83e\ude86 Modularizing Your Game","text":"<p>If you've structured your code well, you can move C# code files (but not script files) out of your project and reference them as a separate package in your game's project. Doing so is completely optional, and should only be considered if build times are a major concern. To make a new module for your project, simply create a new C# class library project and move the relevant code files to it. Then, add a reference to it from your game's project and rebuild.</p> <p>If your code files don't reference Godot at all, you can make a plain C# package with <code>dotnet new classlib</code>. More than likely, though, your code files will reference Godot engine API's. To enable this, you'll need to add GodotSharp as a dependency to your package (make sure to reference the same version of GodotSharp as the <code>Godot.NET.Sdk</code> your game is referencing in it's <code>.csproj</code> file).</p> <p>For packages which reference GodotSharp, you'll almost certainly run into issues trying to run Godot code outside the engine with a test framework like XUnit, so you can leverage Chickensoft's GodotPackage template to spin up a new project that has a test Godot project already setup with GoDotTest.</p>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/#development","title":"\ud83d\udc69\u200d\ud83d\udcbb Development","text":"<p>Debugging Godot projects can be setup with VSCode, VSCodium, Rider, and Visual Studio, among others. Chickensoft projects and templates typically include launch profiles needed to work with VSCode.</p> <p>Godot version management can be automated with GodotEnv, our open source Godot installation and addon manager. GodotEnv runs from the command line and automatically sets up the relevant environment variables, paths, and symlinks on macOS, Windows, and Linux, making it easy for multiple team members to develop a project, stay in sync with engine updates, and use the same launch profiles in the project.</p> <p>To run tests on game code, it can be difficult to use packages like XUnit or NUnit since Godot is a native application which manages the .NET runtime.</p> <p>Chickensoft generally recommends a keep-it-simple approach by using GoDotTest to execute tests from within the Godot game itself and having a preprocessor hook in development builds which runs the tests if it sees the right command-line flags. We automatically include this boilerplate out-of-the-box in the Chickensoft templates. GoDotTest executes tests synchronously and in-order. Tests have access to the test scene and are easily debugged. Additionally, it is compatible with code coverage and abides by GodotEnv's Godot installation path conventions.</p>"},{"location":"chickensoft/how_csharp_works_in_godot/how_csharp_works_in_godot/#the-future","title":"\ud83d\udd70\ufe0f The Future","text":"<p>As C# continues to mature and expand its horizons, we are seeing more support for ahead-of-time compilation in each new release of .NET. This is likely due to limited support for runtime code generation on platforms like iOS, which do not permit just-in time compilation as is typical on other platforms (like Android).</p> <p>In general, we recommend avoiding most reflection, as most will not work well in ahead-of-time compilation scenarios. Instead, we favor compile-time code generation.</p> <p>Many of the chickensoft packages are built on top of the Chickensoft Introspection generator. The introspection generator is a compile-time metaprogramming tool that generates information about the types in a project. You probably won't want to use it directly unless you're building tooling, as you can just leverage the Chickensoft packages which make use of it on your behalf.</p> <p>The Chickensoft introspection generator also produces a type registry for the project it's added to, allowing types to be looked up and filtered in various fashions. For example, the data generated by this tool enables convenient serialization of hierarchical state machines in Chickensoft's LogicBlocks package, as well as simple, ergonomic serialization for general-purpose, versioned models in Chickensoft's Serialization package. Our simple dependency injection tool and script utilities system, AutoInject, also makes use of the generated introspection data to automatically connect nodes to script properties without resorting to reflection.</p> <p>While generated metadata can be clunky and sometimes opaque, we still prefer it over reflection to support platforms like iOS and future-proof our projects as .NET continues to evolve. Finally, a new approach to the C# integration is being developed for Godot based on GDExtension, which will require C# scripts to be ready for ahead-of-time compilation.</p> <p>In general, Godot and C# is an excellent choice today and is already powering a number of existing and upcoming games.</p>"},{"location":"chickensoft/logic_blocks/","title":"\ud83e\udde0 LogicBlocks","text":"Hierarchical state machines (statecharts) for C# and Godot.  ![LogicBlocks allows you to create reactive, hierarchical state machines for Godot games in a type-safe way.](./header.jpg)  Quickly build awesome game behavior using statecharts!  [Get Started](04_basics/) | [Tutorial](tutorial/) | [Reference](reference/)"},{"location":"chickensoft/logic_blocks/#features","title":"Features","text":"<p>LogicBlocks is a serializable, hierarchical state machine package for C# that works well when targeting ahead-of-time (AOT) environments. LogicBlocks draws inspiration from statecharts, state machines, and blocs.</p> <p>Instead of elaborate transition tables, states are simply defined as self-contained class records that read like ordinary code using the state pattern. Logic blocks are designed with performance, adaptability, and error tolerance in mind, making them refactor-friendly and suitable for high performance scenarios (such as games).</p> <p>Logic blocks grow with your code: you can start with a simple state machine and easily scale it into a nested, hierarchical statechart that represents a more complex system \u2014 even while you're working out what the system should be.</p> <p></p>"},{"location":"chickensoft/logic_blocks/#what-to-read-next","title":"\ud83d\udcda What to Read Next","text":"<p>Logic blocks are based on statecharts. You may also know them as hierarchical state machines (HSM's).</p> <ul> <li>\ud83d\udfe2 Introduction to State Machines and Statecharts</li> </ul> <p>Beginner: overview for those who are new to statecharts.</p> <ul> <li>\ud83d\udfe1 Statecharts.dev</li> </ul> <p>Intermediate: all the statechart concepts in one place.</p> <ul> <li>\ud83d\udd34 UML State Machine (Wikipedia)</li> </ul> <p>Expert: all the juicy technical details are here.</p> <ul> <li>\ud83d\udd35 Logic Blocks Timer Tutorial</li> </ul> <p>In a hurry? Learn about hierarchical states and logic blocks all at once!</p>"},{"location":"chickensoft/logic_blocks/#example","title":"\ud83d\udca1 Example","text":"<p>A logic block is a class that receives inputs, maintains a single state instance, and produces outputs.</p> <p>Logic blocks enable you to efficiently model complex behaviors<sup>1</sup>.</p> <pre><code>using Chickensoft.Introspection;\n\n[Meta, LogicBlock(typeof(State), Diagram = true)]\npublic class LightSwitch : LogicBlock&lt;LightSwitch.State&gt; {\n  public override Transition GetInitialState() =&gt; To&lt;State.PoweredOff&gt;();\n\n  public static class Input {\n    public readonly record struct Toggle;\n  }\n\n  public abstract record State : StateLogic&lt;State&gt; {\n    public record PoweredOn : State, IGet&lt;Input.Toggle&gt; {\n      public Transition On(in Input.Toggle input) =&gt; To&lt;PoweredOff&gt;();\n    }\n\n    public record PoweredOff : State, IGet&lt;Input.Toggle&gt; {\n      public Transition On(in Input.Toggle input) =&gt; To&lt;PoweredOn&gt;();\n    }\n  }\n\n  public static class Output {\n    public readonly record struct StatusChanged(bool IsOn);\n  }\n}\n</code></pre>"},{"location":"chickensoft/logic_blocks/#visualizing-logic-blocks","title":"\ud83d\uddbc\ufe0f Visualizing Logic Blocks","text":"<p>LogicBlocks provides a source generator that can generate UML state diagrams of your code.</p> <pre><code>stateDiagram-v2\n\nstate \"LightSwitch State\" as Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State {\n  state \"PoweredOn\" as Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOn\n  state \"PoweredOff\" as Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOff\n}\n\nChickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOff --&gt; Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOn : Toggle\nChickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOn --&gt; Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOff : Toggle\n\nChickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOff : OnEnter \u2192 StatusChanged\nChickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOn : OnEnter \u2192 StatusChanged\n\n[*] --&gt; Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOff\n</code></pre> <p>Generated UML diagrams are placed alongside the code for your logic block with the <code>*.g.puml</code> extension. You can use PlantUML (and/or the PlantUML VSCode Extension) to visualize the generated diagram code.</p> <p>:::tip A diagram explains all of the high level behavior of a state machine in a single picture. Without a diagram, you would have to read and scroll through all the relevant code files to understand the machine (especially if you weren't the author, or forgot how it worked since you had written it). :::</p>"},{"location":"chickensoft/logic_blocks/#differences-from-statecharts","title":"\ud83e\udd2b Differences from Statecharts","text":"<p>In the interest of convenience, logic blocks have a few subtle differences from statecharts:</p> <ul> <li>\ud83d\udc82\u200d\u2640\ufe0f No explicit guards</li> </ul> <p>Use conditional logic in an input handler</p> <ul> <li>\ud83e\udea2 Attach/Detach callbacks</li> </ul> <p>These are an implementation specific detail that are called whenever the state instance changes, as opposed to only being called when the state type hierarchy (i.e., state configuration) changes.</p> <ul> <li>\ud83d\udd70\ufe0f No event deferral</li> </ul> <p>Non-handled inputs are simply discarded. There's nothing to stop you from implementing input buffering on your own, though: you may even use the boxless queue collection that LogicBlocks uses internally.</p> <p>LogicBlocks also uses different terms for some of the statechart concepts to make them more intuitive or disambiguate them from other C# terminology.</p> statecharts logic blocks internal transition self transition event input action output <ol> <li> <p>Simple behaviors, like the light switch example, are considerably more verbose than they need to be. Logic blocks shine brightest when they're used for things that actually require hierarchical state machines.\u00a0\u21a9</p> </li> </ol>"},{"location":"chickensoft/logic_blocks/01_why/","title":"\ud83e\udd28 Why Logic Blocks?","text":"<p>This article explains why you might want to use LogicBlocks to manage state in your game or application.</p>"},{"location":"chickensoft/logic_blocks/01_why/#goals","title":"\u2705 Goals","text":"<p>LogicBlocks was designed in accordance with Chickensoft's development philosophy:</p> <ul> <li>\ud83c\udf43 Flexible</li> <li>Simple to refactor as requirements change</li> <li>States can be easily reorganized and shared between logic blocks</li> <li>Visually compare refactors at a glance by checking generated diagrams</li> <li>\ud83d\ude80 Performant</li> <li>Zero heap allocations if number of inputs do not exceed the cache size</li> <li>Works in reflection-free mode</li> <li>Works when compiled ahead-of-time (AOT) for platforms like iOS</li> <li>\ud83d\udcaf Correct</li> <li>Programming by difference: define only the differences between states</li> <li>Less code == easier to verify</li> <li>Synchronous, ordered input processing for single threaded game logic</li> <li>Diagrams are generated from the code, not the other way around</li> <li>Run-to-completion (RTC): inputs processed immediately and synchronously</li> <li>\ud83d\udc40 Observable</li> <li>Observers can listen to outputs without knowing about states</li> <li>Observers are invoked synchronously in the order they were registered</li> <li>\ud83e\udd13 Readable</li> <li>Use existing OOP concepts: state pattern, inheritance, interfaces</li> <li>Declarative: define all possible states, inputs, and outputs</li> <li>\ud83d\uddbc\ufe0f Visualizable</li> <li>Diagrams are generated from code, not the other way around</li> <li>Diagrams are never out-of-date</li> <li>\ud83d\udcbe Serializable</li> <li>First-party support for polymorphic state and data serialization to JSON</li> <li>AOT-friendly: serialization uses a source generator, not reflection</li> <li>Serialization can be combined with System.Text.Json generated contexts</li> <li>\u2705 Testable</li> <li>Utilities included to make testing states easy</li> <li>Logic blocks themselves can be mocked</li> </ul>"},{"location":"chickensoft/logic_blocks/01_why/#correct-hierarchical-state-lifecycles","title":"\ud83d\udca1 Correct Hierarchical State Lifecycles","text":"<p>LogicBlocks guarantees correctness when executing hierarchical state lifecycle callbacks: i.e., entrance and exit callbacks for compound states (also known as composite states) are guaranteed to run only when the relevant part of the state hierarchy changes.</p> <p>:::note Hierarchical states are represented by making a state that inherits from another state using traditional C# inheritance.</p> <p>In terms of code, compound (or composite) states are simply states that are inherited from by other state types. When a state inherits from another state, it becomes a substate of that state. Otherwise, a state is known as an atomic (or simple) state.</p> <pre><code>  public record ChildState : ParentState { /* ... */ }\n</code></pre> <p>:::</p> <pre><code>stateDiagram-v2\nstate \"Heater State\" as Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_Heater_State {\n  state \"Powered\" as Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_Heater_State_Powered {\n    state \"Idle\" as Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_Heater_State_Idle\n    state \"Heating\" as Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_Heater_State_Heating\n  }\n  state \"Off\" as Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_Heater_State_Off\n}\n\n[*] --&gt; Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_Heater_State_Off\n</code></pre> <p>Any entrance or exit callbacks registered by the <code>Powered</code> state wouldn't be invoked when transitioning from <code>Idle</code> to <code>Heating</code>, since they are both <code>Powered</code> states.</p> <p>On the other hand, changing from any of the <code>Powered</code> states to <code>Off</code> would result in the <code>Powered</code> state's exit callbacks being invoked. Likewise, entering a <code>Powered</code> state from <code>Off</code> would trigger the <code>Powered</code> state's entrance callbacks.</p> <p>LogicBlocks differentiates between \"attaching\" a state and \"entering\" a state. Attaching a state is based on the actual state instance changing, while entering is based on the state type changing. Attach and detach callbacks are always invoked every time the state changes, whereas entrance and exit callbacks respect the type hierarchy.</p> <p>:::danger For best results, place housekeeping operations in attach and detach callbacks, and game or business related logic in entrance and exit callbacks. More on this here. :::</p>"},{"location":"chickensoft/logic_blocks/02_installation/","title":"\ud83d\udce6 Installation","text":""},{"location":"chickensoft/logic_blocks/02_installation/#installing-logicblocks","title":"\ud83d\udce5 Installing LogicBlocks","text":"<p>LogicBlocks and its diagram generator are available as C# packages on nuget.</p> <p>You'll also want to install the Chickensoft Introspection generator. While optional, it allows LogicBlocks to identify and preallocate states for you so that you don't have to add each state manually.</p> <p>Find the latest version number of LogicBlocks, its diagram generator, and the introspection generator on nuget: Chickensoft.LogicBlocks, Chickensoft.LogicBlocks.DiagramGenerator, Chickensoft.Introspection.Generator.</p> <pre><code>&lt;PackageReference Include=\"Chickensoft.LogicBlocks\" Version=\"#.#.#\" /&gt;\n&lt;PackageReference Include=\"Chickensoft.LogicBlocks.DiagramGenerator\" Version=\"#.#.#\" PrivateAssets=\"all\" OutputItemType=\"analyzer\" /&gt;\n&lt;PackageReference Include=\"Chickensoft.Introspection.Generator\" Version=\"#.#.#\" PrivateAssets=\"all\" OutputItemType=\"analyzer\" /&gt;\n</code></pre> <p>:::caution Don't forget to include the <code>PrivateAssets=\"all\"</code> and <code>OutputItemType=\"analyzer\"</code> attributes on generator package references. :::</p> <p>:::caution We strongly recommend treating warning <code>CS9057</code> as an error to catch possible compiler-mismatch issues with the Introspection generator. (See the Introspection README for more details.) To do so, add a <code>WarningsAsErrors</code> line to your <code>.csproj</code> file's <code>PropertyGroup</code>:</p> <pre><code>&lt;PropertyGroup&gt;\n  &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;\n  ...\n  &lt;!-- Catch compiler-mismatch issues with the Introspection generator --&gt;\n  &lt;WarningsAsErrors&gt;CS9057&lt;/WarningsAsErrors&gt;\n  ...\n&lt;/PropertyGroup&gt;\n</code></pre> <p>:::</p> <p>:::tip Always use the same version of the LogicBlocks diagram generator that you use for LogicBlocks, since they are updated together. :::</p>"},{"location":"chickensoft/logic_blocks/03_quick_start/","title":"\ud83d\ude80 Quick Start","text":""},{"location":"chickensoft/logic_blocks/03_quick_start/#creating-a-logic-block","title":"\ud83d\udca1 Creating a Logic Block","text":"<p>A logic block is simply a class that extends <code>LogicBlock</code>. Logic blocks receive inputs, maintain a single state value, and produce outputs.</p> <pre><code>using Chickensoft.Introspection;\n\n[Meta, LogicBlock(typeof(State), Diagram = true)]\npublic partial class LightSwitch : LogicBlock&lt;LightSwitch.State&gt; {\n  // Define your initial state here.\n  public override Transition GetInitialState() =&gt; To&lt;State.PoweredOff&gt;();\n\n  // By convention, inputs are defined in a static nested class called Input.\n  public static class Input {\n    public readonly record struct Toggle;\n  }\n\n  // By convention, outputs are defined in a static nested class called Output.\n  public static class Output {\n    public readonly record struct StatusChanged(bool IsOn);\n  }\n\n  // To reduce unnecessary heap allocations, inputs and outputs should be\n  // readonly record structs.\n\n  // By convention, the base state type is nested inside the logic block. This\n  // helps the logic block diagram generator know where to search for state\n  // types.\n  public abstract record State : StateLogic&lt;State&gt; {\n    // Substates are sometimes nested inside their parent states to help\n    // organize the code.\n\n    // On state.\n    public record PoweredOn : State, IGet&lt;Input.Toggle&gt; {\n      public PoweredOn() {\n        // Announce that we are now on.\n        this.OnEnter(() =&gt; Output(new Output.StatusChanged(IsOn: true)));\n      }\n\n      public Transition On(in Input.Toggle input) =&gt; To&lt;PoweredOff&gt;();\n    }\n\n    // Off state.\n    public record PoweredOff : State, IGet&lt;Input.Toggle&gt; {\n      public PoweredOff() {\n        // Announce that we are now off.\n        this.OnEnter(() =&gt; Output(new Output.StatusChanged(IsOn: false)));\n      }\n\n      public Transition On(in Input.Toggle input) =&gt; To&lt;PoweredOn&gt;();\n    }\n  }\n}\n</code></pre> <p>To make a logic block, you simply extend the <code>LogicBlock&lt;TState&gt;</code> class, override the <code>GetInitialState()</code> method, and add the <code>[LogicBlock]</code> attribute to your class with the type of your state.</p>"},{"location":"chickensoft/logic_blocks/03_quick_start/#using-a-logic-block","title":"\ud83d\udd0c Using a Logic Block","text":"<p>LogicBlocks includes a simple binding system to enable you to write declarative code, even in imperative environments like a game engine. Bindings allow you to monitor the inputs a state machine receives and the outputs it produces, in addition to its state changes and any exceptions that occur.</p> <pre><code>// Start the logic block to force the initial state to be active.\n//\n// This is optional: you can also start a logic block by just adding an\n// input to it or reading its state.\nlogic.Start();\n\n// Add an input to turn our light switch on.\nlogic.Input(new LightSwitch.Input.Toggle());\n\n// The logic block's value represents the current state.\nvar state = logic.Value; // PoweredOn\n\n// Bindings allow you to observe the logic block easily.\nusing var binding = logic.Bind();\n\n// Monitor an output:\nbinding.Handle((in LightSwitch.Output.StatusChanged output) =&gt;\n  Console.WriteLine(\n    $\"Status changed to {(output.IsOn ? \"on\" : \"off\")}\"\n  )\n);\n\n// Can also use bindings to monitor inputs, state changes, and exceptions.\n//\n// In general, prefer monitoring outputs over state changes for more\n// flexible code.\n\n// Monitor an input:\nbinding.Watch((in LightSwitch.Input.Toggle input) =&gt;\n  Console.WriteLine(\"Toggled!\")\n);\n\n// Monitor a specific type of state:\nbinding.When((LightSwitch.State.PoweredOn _) =&gt;\n  Console.WriteLine(\"Powered on!\")\n);\n\n// Monitor all exceptions:\nbinding.Catch((Exception e) =&gt; Console.WriteLine(e.Message));\n\n// Monitor specific types of exceptions:\nbinding.Catch((InvalidOperationException e) =&gt;\n  Console.WriteLine(e.Message)\n);\n</code></pre>"},{"location":"chickensoft/logic_blocks/07_serialization/","title":"\ud83d\udcbe Serialization","text":"<p>LogicBlocks can be serialized by using the Chickensoft Introspection and Serialization packages together.</p> <p>Like LogicBlocks, the Serialization package builds off the Introspection package to provide a simple way of serializing and deserializing polymorphic objects, as well as support for versioning.</p> <p>:::note The serialization system is able to be used alongside System.Text.Json, since it uses the metadata generated by the Introspection generator to describe the types and information needed System.Text.Json to serialize an object \u2014 it's essentially an alternative (but compatible) generator for System.Text.Json that can be mixed and matched with other System.Text.Json generated contexts.</p> <p>Using generated metadata allows the serialization system to work for ahead-of-time (AOT) platforms like iOS. :::</p>"},{"location":"chickensoft/logic_blocks/07_serialization/#defining-a-serializable-logic-block","title":"\ud83d\udcbd Defining a Serializable Logic Block","text":"<p>To make a logic block serializable, it needs to be an introspective and identifiable type, as well as have a parameterless constructor.</p> <p>We've been using the <code>[Meta]</code> attribute throughout the documentation to make our logic blocks introspective. LogicBlocks uses the generated metadata to automatically preallocate states when our logic block is constructed (if it's an introspective type).</p> <p>Now, we simply need to add the <code>[Id]</code> attribute to the logic block itself, as well as make each state introspective. Additionally, non-abstract states need to be given an <code>[Id]</code>, too.</p> <p>:::caution Serializable type <code>[Id]</code>'s need to be globally unique across all serializable types used in your project. :::</p> <pre><code>using Chickensoft.Introspection;\n\npublic interface ISerializableLogicBlock : ILogicBlock&lt;SerializableLogicBlock.State&gt;;\n\n[Meta, LogicBlock(typeof(State), Diagram = true)]\npublic partial class SerializableLogicBlock :\nLogicBlock&lt;SerializableLogicBlock.State&gt;, ISerializableLogicBlock {\n  public override Transition GetInitialState() =&gt; To&lt;State.PoweredOff&gt;();\n\n  [Meta]\n  public abstract partial record State : StateLogic&lt;State&gt; {\n    [Meta, Id(\"serializable_logic_state_off\")]\n    public partial record PoweredOff : State;\n\n    [Meta, Id(\"serializable_logic_state_on\")]\n    public partial record PoweredOn : State;\n  }\n}\n</code></pre> <p>The <code>[Id]</code> attribute is used as the type discriminator when reading and writing json data. By giving it an explicit string, you ensure your serialization system remains stable, even if the class name or location changes.</p>"},{"location":"chickensoft/logic_blocks/07_serialization/#serializing-a-logic-block","title":"\ud83e\udd10 Serializing a Logic Block","text":"<p>Once you have a serializable logic block, it's easy to turn it into json (and get it back again).</p> <pre><code>    var options = new JsonSerializerOptions {\n      WriteIndented = true,\n      // Use the type resolver and converter from the\n      // Chickensoft.Serialization package. You can combine these with other\n      // type resolvers and converters.\n      TypeInfoResolver = new SerializableTypeResolver(),\n      Converters = { new SerializableTypeConverter() }\n    };\n\n    var logic = new SerializableLogicBlock();\n\n    var json = JsonSerializer.Serialize(logic, options);\n\n    /* Produces\n      \"\"\"\n      {\n        \"$type\": \"serializable_logic\",\n        \"$v\": 1,\n        \"state\": {\n          \"$type\": \"serializable_logic_state_off\",\n          \"$v\": 1\n        },\n        \"blackboard\": {\n          \"$type\": \"blackboard\",\n          \"$v\": 1,\n          \"values\": {}\n        }\n      }\n      \"\"\"\n    */\n</code></pre> <p>Likewise, you can deserialize a logic block from json.</p> <pre><code>// using the same serialization options shown above\n\nvar logic = JsonSerializer.Deserialize&lt;SerializableLogicBlock&gt;(\n  json, options\n);\n</code></pre>"},{"location":"chickensoft/logic_blocks/07_serialization/#absorbing-a-logic-block","title":"\ud83e\uddfd Absorbing a Logic Block","text":"<p>When deserializing a logic block, it can be helpful to copy the state and blackboard values from a deserialized logic block into an already existing logic block. Copying the state of a deserialized logic block into an existing logic block allows you to preserve any bindings already established.</p> <pre><code>var logic = JsonSerializer.Deserialize&lt;SerializableLogicBlock&gt;(\n  json, options\n);\n\n// Copy the state and blackboard of the deserialized logic block into an\n// existing logic block.\nexistingLogicBlock.RestoreFrom(logic);\n\n// Now our existing logic block is in the same state and has the same blackboard\n// values as the logic block we deserialized, allowing us to continue where we\n// left off.\n</code></pre>"},{"location":"chickensoft/logic_blocks/07_serialization/#saving-blackboard-values","title":"\ud83e\uddd1\u200d\ud83c\udfeb Saving Blackboard Values","text":"<p>Since most blackboard values represent runtime dependencies, blackboard values are not persisted by default when serializing a logic block.</p> <p>You can register blackboard values that will get serialized. This is done by using the blackboard's <code>Save()</code> method. Since every logic block implements the blackboard interface, we can do so easily after creating the logic block.</p> <pre><code>[Meta, Id(\"my_related_data\")]\npublic partial record MyRelatedData {\n  public required string Name { get; init; }\n  public string? Description { get; init; }\n}\n\nvar logic = new SerializableLogicBlock();\n\n// Not persisted \u2014 just adding a runtime dependency.\nlogic.Set(new MyRelatedService());\n\n// Will be persisted if we serialize the logic block.\n// Types saved this way must be introspective, identifiable types, too.\nlogic.Save(() =&gt; new MyRelatedData());\n</code></pre> <p>By requiring you to pass in a factory closure, the serialization system ensures the value is only created when needed \u2014 allowing <code>RestoreFrom()</code> to provide a value instead if you call it before using an existing logic block.</p>"},{"location":"chickensoft/logic_blocks/07_serialization/#versioning","title":"\u23f3 Versioning","text":"<p>Logic blocks supports versioning states.</p> <pre><code>[Meta, Id(\"serializable_logic_versioned_state\")]\npublic abstract partial record VersionedState;\n\n[Meta, Version(1)]\npublic partial record Version1 : VersionedState;\n\n[Meta, Version(2)]\npublic partial record Version2 : VersionedState;\n</code></pre> <p>This results in the following state hierarchy:</p> <pre><code>stateDiagram-v2\nstate \"SerializableLogicBlock State\" as Chickensoft_LogicBlocks_Tutorial_SerializableLogicBlock_State {\n  state \"PoweredOff\" as Chickensoft_LogicBlocks_Tutorial_SerializableLogicBlock_State_PoweredOff\n  state \"PoweredOn\" as Chickensoft_LogicBlocks_Tutorial_SerializableLogicBlock_State_PoweredOn\n  state \"VersionedState\" as Chickensoft_LogicBlocks_Tutorial_SerializableLogicBlock_State_VersionedState {\n    state \"Version1\" as Chickensoft_LogicBlocks_Tutorial_SerializableLogicBlock_State_Version1\n    state \"Version2\" as Chickensoft_LogicBlocks_Tutorial_SerializableLogicBlock_State_Version2\n  }\n}\n[*] --&gt; Chickensoft_LogicBlocks_Tutorial_SerializableLogicBlock_State_PoweredOff\n</code></pre> <p>:::note The <code>[Id]</code> is moved to an abstract base type and the <code>[Version]</code> attribute is applied to the derived types.</p> <p>You can shuffle around type hierarchies to match your versioning logic as long as the id's and shape of the types remain stable across versions. :::</p>"},{"location":"chickensoft/logic_blocks/07_serialization/#testing-abstract-serializable-states","title":"\ud83d\ude36\u200d\ud83c\udf2b\ufe0f Testing Abstract Serializable States","text":"<p>When you give a logic block an <code>[Id]</code> to make it serializable, it suddenly requires that every state be an introspective type so it can be pre-allocated and serialized correctly.</p> <p>When testing abstract logic block states, it is common to create a concrete test implementation of the state for testing purposes:</p> <pre><code>public class MyTest {\n  public class SomeState : SerializableLogicBlock.SomeAbstractState;\n\n  [Fact]\n  public void Initializes() =&gt; new TestState().ShouldNotBeNull();\n}\n</code></pre> <p>Serializable logic blocks, however, require that <code>TestState</code> be introspective and identifiable (since it is a concrete type). Otherwise, you'd get an error when creating the logic block.</p> <pre><code>[Meta, Id(\"serializable_logic_test_some_state\")]\npublic partial class SomeState : SerializableLogicBlock.SomeAbstractState;\n</code></pre> <p>You can simply add the <code>[TestState]</code> attribute to the state to prevent logic blocks from trying to preallocate it and verify that it is serializable.</p> <pre><code>[TestState, Meta, Id(\"serializable_logic_test_some_state\")]\npublic partial class SomeState : SerializableLogicBlock.SomeAbstractState;\n</code></pre> <p>Be sure to read the Serialization package's readme for additional tips on making serializable types.</p>"},{"location":"chickensoft/logic_blocks/08_tips_and_tricks/","title":"\ud83e\ude84 Tips and Tricks","text":"<p>Additional functionality and troubleshooting tips for LogicBlocks are described here.</p>"},{"location":"chickensoft/logic_blocks/08_tips_and_tricks/#manual-logic-blocks","title":"\ud83d\udd27 Manual Logic Blocks","text":"<p>Most examples in the documentation depict logic blocks being used alongside the Introspection generator to enable automatic state preallocation and serialization. If you do not want to leverage the generator, you can omit it and still use logic blocks.</p> <p>To make a logic block without the generator, simply omit the <code>[Meta]</code> type attribute from the logic block and its states. Be sure to manually preallocate all possible instantiable states in the logic block's constructor and add them to the blackboard, being careful not to forget any.</p> <pre><code>[LogicBlock(typeof(State))]\npublic class ManualLogicBlock : LogicBlock&lt;ManualLogicBlock.State&gt; {\n  public abstract record State : StateLogic&lt;State&gt; { }\n\n  public record StateOne : State;\n  public record StateTwo : State;\n  public override Transition GetInitialState() =&gt; To&lt;State&gt;();\n\n  public ManualLogicBlock() {\n    // Important: we have to add an instance of each state to the blackboard\n    // to avoid errors at runtime.\n    Set(new StateOne());\n    Set(new StateTwo());\n  }\n}\n</code></pre>"},{"location":"chickensoft/logic_blocks/08_tips_and_tricks/#generic-logic-blocks","title":"\ud83d\udcd0 Generic Logic Blocks","text":"<p>In C#, a type is generic if it accepts type parameters or is nested (however deeply) inside a type that receives generic parameters. Logic Blocks can be generic, but there are a few limitations to be aware of. Notably:</p> <ul> <li> <p>\ud83d\udeab \u2728 Generic logic blocks can't be used with the introspection generator to automatically preallocate states, so you have to manually create state instances and add them to the blackboard, as shown above.</p> </li> <li> <p>\ud83d\udeab \ud83d\udcbe Generic logic blocks are not serializable. The logic block serialization mechanisms are built on top of the Chickensoft Serialization system, which itself is built on the Chickensoft Introspection library. The Introspection system does not support generic types (by design), so neither does the Chickensoft Serialization system or Logic Blocks.</p> </li> </ul>"},{"location":"chickensoft/logic_blocks/08_tips_and_tricks/#the-naive-approach","title":"\ud83e\udd2a The Naive Approach","text":"<p>The <code>[LogicBlock]</code> attribute specifies the type to be used as the logic block's state and is read at build-time by the Logic Blocks Diagram Generator so it can resolve the state hierarchy for visualization purposes. The <code>[LogicBlock]</code> attribute is also used to find the state's type when Introspection is being used so that the logic block can look up derived states and their metadata at runtime to preallocate states.</p> <p>:::danger The following example results in a build error because <code>typeof</code> expressions inside an attribute are not allowed to implicitly reference generic types.</p> <pre><code>// Example: nesting a logic block in a generic type\npublic class MyGenericType&lt;T&gt; {\n  [LogicBlock(typeof(State))] // &lt;- Error CS0416\n  public class MyLogicBlock : LogicBlock&lt;MyLogicBlock.State&gt; {\n    public override Transition GetInitialState() =&gt; To&lt;State&gt;();\n    public record State : StateLogic&lt;State&gt; {}\n  }\n}\n</code></pre> <pre><code>ERROR: 'MyGenericType&lt;T&gt;.MyLogicBlock.State': an attribute argument cannot use type parameters (CS0416)\n</code></pre> <p>:::</p> <p>Because the <code>State</code> type is nested inside a generic type, it is itself a generic type (per the C# language rules), even though it might not look like it. In reality, the actual fully qualified name of the <code>State</code> type is <code>MyGenericType&lt;T&gt;.MyLogicBlock.State</code>. When depicted with its fully qualified name, it is easy to see why the <code>State</code> type is secretly generic.</p> <p>One alternative is to move the state outside the generic type, but this isn't always desirable since you won't have access to the generic types that the logic block is intended to work with.</p>"},{"location":"chickensoft/logic_blocks/08_tips_and_tricks/#generic-logic-block-fix","title":"\u2705 Generic Logic Block Fix","text":"<p>To declare a generic logic block, simply specify the state type as an open generic type and ensure your logic block and its states do not have the <code>[Meta]</code> attribute. The diagram generator (as of version 5.10.0) is smart enough to recognize open generic state types.</p> <pre><code>public class MyGenericType&lt;T&gt; {\n  // Fix: simply specify the state type as an open generic type\n  [LogicBlock(typeof(MyGenericType&lt;&gt;.MyLogicBlock.State))]\n  public class MyLogicBlock : LogicBlock&lt;MyLogicBlock.State&gt; {\n    public override Transition GetInitialState() =&gt; To&lt;State&gt;();\n    public record State : StateLogic&lt;State&gt; { }\n  }\n}\n</code></pre> <p>Since C# doesn't like secret generic types, you have to be very specific when specifying the state type in the <code>[LogicBlock]</code> attribute.</p>"},{"location":"chickensoft/logic_blocks/04_basics/","title":"\ud83e\uddee Basics","text":"<p>Before diving into more code examples, it can be helpful to understand the theory behind a logic block. Logic blocks are inspired by statecharts, so if you haven't already read about them on statecharts.dev, it's well worth your time to do so.</p> <p>:::tip Don't worry too much about understanding all the theory up-front. There's also a tutorial that will guide you through creating a fully-fledged logic block that covers all the typical use cases. The tutorial will explain each concept as it introduces it, too \u2014 in case it wasn't clear from this article. :::</p> <p>A logic block is a class that receives inputs, maintains a single state instance, and produces outputs.</p> <p>An input is simply an object containing any relevant information that is given to the current state to process. Inputs are processed one at a time and in the order they were received by whatever state is active at the time the input is processed.</p> <p>A state is an object with \"lifecycle hooks\" that allow it to observe when it has been attached to the logic block that owns it, detached, entered, or exited. Only one state object instance is ever active at once. The active state is considered the logic block's current <code>Value</code>.</p> <p>A state can implement input handlers for each type of input it wishes to handle, returning the next state the logic block should transition to.</p> <p>After being attached, a state can produce one or more outputs at any time.</p> <p>An output is a temporary object that contains information related to state behavior. Outputs are emitted by the logic block to any bindings or logic block listeners subscribed to the logic block, allowing the logic block's states to create side effects without being tightly coupled to other components.</p> <p>The blackboard is a simple dictionary that allows the logic block and its states to access shared data. A logic block can set data in the blackboard from its constructor. States look up values stored in the blackboard by their system type.</p> <p>:::note You may have noticed we borrowed the term blackboard from behavior trees \u2014 it's a nice way to decouple states from the dependencies they need. :::</p>"},{"location":"chickensoft/logic_blocks/04_basics/01_inputs/","title":"\ud83d\udce5 Inputs","text":"<p>Inputs are temporary, disposable objects that contain relevant information about the input.</p> <p>For example, a logic block for a dimmable light switch might have an input that contains the dimmer value as a percentage between <code>0</code> and <code>1</code>.</p> <pre><code>partial class DimmableLightSwitch {\n  public static class Input {\n    public readonly record struct DimmerUpdated(double Value);\n  }\n}\n</code></pre> <p>:::tip By convention, inputs are shown stored in a simple static class called <code>Input</code> inside the logic block that owns them. This organizational pattern groups inputs and allows consistent referencing: e.g., <code>DimmableLightSwitch.Input.DimmerUpdated</code>.</p> <p>If that feels too verbose, you can always import the logic block statically with a <code>using static Project.DimmableLightSwitch;</code> statement and then reference the nested types directly: <code>Input.DimmerUpdated</code>. :::</p> <p>You'll primarily interact with a logic block by giving it an input whenever something interesting happens. Inputs are designed to be short lived, ephemeral objects that simply carry relevant data.</p> <pre><code>var dimmableLightSwitch = new DimmableLightSwitch();\n\ndimmableLightSwitch.Input(new DimmableLightSwitch.Input.DimmerUpdated(0.5d));\n</code></pre> <p>:::info \ud83d\ude80 Using a <code>struct</code> for an input helps keep it on the stack. A logic block will only queue an input on the heap if an input is added while another input is still being processed. Even then, the way .NET collections tend to cache and resize themselves will typically prevent any memory allocations from happening at all! Plus, if LogicBlocks does need to queue inputs, it can do so without boxing them. \ud83d\ude0a</p> <p>Making an input a <code>record struct</code> allows us to take advantage of the primary constructor syntax introduced for records in C# 10, ensuring the positional parameters are converted to properties automatically. Using the primary constructor syntax drastically shortens the amount of code we need to write for each input type.</p> <p>Lastly, we use the <code>readonly</code> modifier for our inputs to ensure that they can't be modified after they are created. This has the nice advantage of making our inputs immutable and allows us to take advantage of performance optimizations by passing inputs with the <code>in</code> modifier introduced in C# 7. :::</p>"},{"location":"chickensoft/logic_blocks/04_basics/02_states/","title":"\ud83d\udd04 States","text":"<p>State refers to the value maintained by a logic block.</p> <p>States can receive inputs, read values from the shared blackboard, and produce outputs and errors. Logic blocks don't actually do very much by themselves \u2014 the current state determines what inputs get handled.</p> <p>States are always <code>record class</code> reference types that are derived from <code>StateLogic&lt;TState&gt;</code>, a type provided by LogicBlocks.</p> <pre><code>using Chickensoft.Introspection;\n\n[Meta, LogicBlock(typeof(State), Diagram = true)]\npublic partial class LightSwitch : LogicBlock&lt;LightSwitch.State&gt; {\n\n  // Define the state. By convention, this is placed inside the logic block.\n  public abstract record State : StateLogic&lt;State&gt; {\n    // On state.\n    public record PoweredOn : State, IGet&lt;Input.Toggle&gt; {}\n\n    // Off state.\n    public record PoweredOff : State, IGet&lt;Input.Toggle&gt; {\n      public Transition On(in Input.Toggle input) =&gt; To&lt;PoweredOn&gt;();\n    }\n  }\n\n  // Define your initial state here.\n  public override Transition GetInitialState() =&gt; To&lt;State.PoweredOff&gt;();\n}\n</code></pre> <p>Each state type can extend other state types using traditional C# inheritance, representing the idea of compound states from statechart theory.</p> <p>Only one instance of a state is ever active at once. When a state instance is active, we say it is <code>attached</code>. When a state change occurs, the previous state instance is <code>detached</code>.</p>"},{"location":"chickensoft/logic_blocks/04_basics/02_states/#handling-inputs-state-changes","title":"\ud83d\udce5 Handling Inputs &amp; State Changes","text":"<p>States define input handlers which allow them to receive inputs and return the next state th e States indicate which inputs they handle by implementing <code>IGet&lt;TInputType&gt;</code> for each type of input they want to handle.</p> <pre><code>public record MyState : State, IGet&lt;Input.A&gt;, IGet&lt;Input.B&gt;, IGet&lt;Input.C&gt; {\n  // Don't change states on A\n  public Transition On(in Input.A input) =&gt; ToSelf();\n\n  // Go to StateC on C\n  public Transition On(in Input.C input) =&gt; To&lt;StateC&gt;();\n}\n</code></pre> <p>Input handlers are processed synchronously and always return a transition to the next state. We use <code>To&lt;TState&gt;()</code> method to define a transition to another state. If you don't want to change states, simply return <code>ToSelf()</code>.</p> <p>States are stored on the blackboard.</p>"},{"location":"chickensoft/logic_blocks/04_basics/02_states/#blackboard","title":"\ud83e\uddd1\u200d\ud83c\udfeb Blackboard","text":"<p>The blackboard is a type of dictionary collection that allows the logic block and its states to access shared data. States look up values stored in the blackboard by their system type.</p> <p>The logic block keeps a blackboard internally, but doesn't expose it. Instead, it implements the <code>IBlackboard</code> interface, allowing you to treat it as if it were the blackboard.</p> <pre><code>var logic = new MyLogicBlock();\n\n// Add all the dependencies that states will need.\nlogic.Set&lt;IService&gt;(new MyRelatedService());\n\nvar service = logic.Get&lt;IService&gt;();\n</code></pre> <p>Each state instance has an internal context that allows it to interact with the logic block while it is attached. The base <code>StateLogic&lt;TState&gt;</code> class that every state derives from provides a <code>Get&lt;T&gt;()</code> method that allow the state to read values from the logic block's blackboard.</p> <pre><code>[Meta, LogicBlock(typeof(State), Diagram = true)]\npublic partial class LightSwitch : LogicBlock&lt;LightSwitch.State&gt; {\n\n  public abstract record State : StateLogic&lt;State&gt; {\n\n    public record PoweredOn : State, IGet&lt;Input.Toggle&gt; {\n      public PoweredOn() {\n        OnAttach(() =&gt; {\n          Get&lt;MyRelatedService&gt;().StartDoingSomething()\n        });\n      }\n    }\n\n  ...\n</code></pre>"},{"location":"chickensoft/logic_blocks/04_basics/02_states/#lifecycle-callbacks","title":"\ud83c\udf31 Lifecycle Callbacks","text":""},{"location":"chickensoft/logic_blocks/04_basics/02_states/#attachment","title":"\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc68 Attachment","text":"<p>When a state change occurs, the current state instance is <code>detached</code> and the next state instance is <code>attached</code>. Only one state instance is ever <code>attached</code> at once.</p> <p>States can register callbacks that allow them to know when they become attached and detached.</p> <pre><code>public MyState() {\n  OnAttach(() =&gt; System.Console.WriteLine(\"MyState attached.\"))\n  OnDetach(() =&gt; System.Console.WriteLine(\"MyState detached.\"))\n}\n</code></pre> <p>:::info For the sake of sanity, registering lifecycle callbacks should only be done in the state's constructor. :::</p>"},{"location":"chickensoft/logic_blocks/04_basics/02_states/#entrance-and-exits","title":"\ud83d\udeaa Entrance and Exits","text":"<p>States can also observe when they are <code>entered</code> and <code>exited</code>.</p> <p>Unlike attachment, which is called every time a state instance is swapped for the active state of the logic block, entrance and exit callbacks are only invoked when the state's type hierarchy changes.</p> <pre><code>public MyState() {\n  this.OnEnter(() =&gt; System.Console.WriteLine(\"MyState entered.\"))\n  this.OnExit(() =&gt; System.Console.WriteLine(\"MyState exited.\"))\n}\n</code></pre> <p>LogicBlocks guarantees correct behavior for entrance and exit callbacks with compound states (states that inherit other states).</p> <p>If you transition between two states that extend a common parent state, the common parent state will not have any of its exit callbacks invoked, since you are still in that type of state.</p> <p>:::info Unlike <code>OnAttach</code> and <code>OnDetach</code>, you have to invoke <code>OnEnter</code> and <code>OnExit</code> as <code>this.OnEnter</code> and <code>this.OnExit</code>, respectively. LogicBlocks has to implement <code>this.OnEnter</code> and <code>this.OnExit</code> as extension methods to properly capture the generic context. Unlike in previous versions, you don't have to specify which type of state you are entering \u2014 it just knows. :::</p>"},{"location":"chickensoft/logic_blocks/04_basics/02_states/#stopping-and-starting","title":"\ud83c\udfce\ufe0f Stopping and Starting","text":"<p>By default, a logic block will not create the first state until it is read, explicitly started, or receives an input. Lazily initializing state allows you to determine when the initial state should actually be attached and entered, guaranteeing that any side effects don't occur until you're ready.</p> <pre><code>var logic = new MyLogicBlock();\n\n// Make sure the initial state is attached and entered.\nlogic.Start();\n\n// Exit and detach the current state.\nlogic.Stop();\n</code></pre> <p>Starting and stopping a logic block triggers the relevant attach/detach and entrance/exit callbacks.</p>"},{"location":"chickensoft/logic_blocks/04_basics/02_states/#compound-composite-states","title":"\u281b Compound / Composite States","text":"<p>LogicBlocks supports the concept of compound states (also known as composite states) as defined by statecharts. A compound state is simply a state which contains more than one state inside it.</p> <p>:::info States can define themselves in terms of other existing states, only accounting for the changes between them. Coding-by-difference like this helps prevents duplicate logic and ensure correctness. :::</p>"},{"location":"chickensoft/logic_blocks/04_basics/02_states/#compound-states","title":"Compound States","text":"<p>Since a state is also a logic block, a state can have its own substates and internal transitions. This is a key feature of statecharts, and it's supported by LogicBlocks too.</p> <p>Let's create a simple calculator with different operation modes (add, subtract, etc).</p> <p></p> <p>Every state has the ability to add child states when it's attached to a logic block. This makes it easy to create recursive, hierarchical state structures.</p> <pre><code>public class Calculator : LogicBlock&lt;IState&gt; {\n  public Calculator(LogicBlockSettings settings) : base(settings) { }\n\n  public class Add : LogicState {\n    protected override void OnEnter() =&gt;\n      Debug.WriteLine(\"Add mode enabled\");\n    public class Push : Input&lt;int&gt; { }\n  }\n\n  public class Subtract : LogicState {\n    protected override void OnEnter() =&gt;\n      Debug.WriteLine(\"Subtract mode enabled\");\n    public class Push : Input&lt;int&gt; { }\n  }\n\n  // ... etc ...\n}\n</code></pre>"},{"location":"chickensoft/logic_blocks/04_basics/02_states/#initialization-call-order","title":"Initialization Call Order","text":"<p>The following diagram shows the order of function calls during initialization:</p> <p></p>"},{"location":"chickensoft/logic_blocks/04_basics/03_outputs/","title":"\ud83d\udce4 Outputs","text":"<p>Outputs are temporary, disposable objects that are produced by a state and immediately passed to each of the logic block's listeners and bindings.</p> <p>An output is a state's way of indicating something of interest has happened without having to be tightly coupled to interested systems.</p> <pre><code>partial class DimmableLightSwitch {\n    public static class Output {\n        public readonly record struct StatusChanged(bool IsOn);\n    }\n}\n</code></pre> <p>:::tip By convention, outputs are shown stored in a simple static class called <code>Output</code> inside the logic block that owns them. :::</p> <p>Outputs are produced from inside a state by calling the <code>Output</code> method.</p> <pre><code>public record PoweredOn : State {\n  public PoweredOn() {\n    this.OnEnter(() =&gt;\n      // Produce an output when we enter this state.\n      Output(new Output.StatusChanged(IsOn: true))\n    );\n  }\n}\n</code></pre> <p>Like inputs, outputs should be <code>readonly record struct</code> types.</p>"},{"location":"chickensoft/logic_blocks/04_basics/03_outputs/#responding-to-outputs","title":"\ud83d\ude92 Responding to Outputs","text":"<p>Whenever an output is produced, any bindings or logic block listeners will be invoked immediately. If you're using structs, this will keep outputs from ever hitting the heap \u2014\u00a0ensuring zero memory allocations occur.</p> <pre><code>using var binding = lightSwitch.Bind();\n\n// Monitor an output:\nbinding.Handle((in LightSwitch.Output.StatusChanged output) =&gt;\n  System.Console.WriteLine(\n    $\"Status changed to {(output.IsOn ? \"on\" : \"off\")}\"\n  )\n);\n</code></pre>"},{"location":"chickensoft/logic_blocks/04_basics/03_outputs/#outputs-vs-direct-manipulation","title":"\ud83e\udd4a Outputs vs Direct Manipulation","text":"<p>LogicBlocks provides two different mechanisms that states can use to mutate objects outside the state:</p> <ul> <li>call methods directly on blackboard objects</li> </ul> <pre><code>public Transition On(in Input.SomethingHappened input) {\n  Get&lt;MyRelatedService&gt;().ChangeSomething(input.Value);\n\n  return ToSelf();\n}\n</code></pre> <ul> <li>produce outputs for objects that bind to the logic block</li> </ul> <pre><code>public Transition On(in Input.SomethingHappened input) {\n  Output(new Output.ChangeSomething(input.Value));\n\n  return ToSelf();\n}\n</code></pre> <p>You can use either mechanism depending on the situation.</p> <p>If you're following the enjoyable game architecture guide, prefer calling methods to mutate services in the layer below the logic block (the non-visual game logic layer), and produce outputs to influence the view layer above you (game entity scripts, etc).</p> <p>If you wish, you can restrict what operations are possible from a logic block by getting and setting blackboard objects by the type of the interface you wish to interact with them as.</p> <pre><code>logic = new MyLogicBlock();\n\nlogic.Set(new MyRelatedService() as IMyRelatedService)\n//  or, same as above:\nlogic.Set&lt;IMyRelatedService&gt;(new MyRelatedService())\n\n// elsewhere, in your logic block state\n  public Transition On(in Input.SomethingHappened input) {\n    // must access by the type it was stored as\n    var something = Get&lt;IMyRelatedService&gt;().GrabSomethingForMe();\n\n    // ...\n\n    return ToSelf();\n  }\n</code></pre>"},{"location":"chickensoft/logic_blocks/04_basics/04_errors/","title":"\u274c Errors","text":"<p>Logic blocks are designed to be error-tolerant by default to reduce crashes in production. When an error occurs in an input handler, the logic block catches it internally to avoid halting execution.</p> <p>You can easily override the default error handling behavior.</p>"},{"location":"chickensoft/logic_blocks/04_basics/04_errors/#customizing-error-handling","title":"\ud83d\udea8 Customizing Error Handling","text":"<pre><code>[Meta, LogicBlock(typeof(State))]\npublic partial class MyLogicBlock : LogicBlock&lt;MyLogicBlock.State&gt; {\n  ...\n\n  protected override void HandleError(Exception e) {\n    // Make this logic block crash on error.\n    throw e;\n  }\n}\n</code></pre>"},{"location":"chickensoft/logic_blocks/04_basics/04_errors/#adding-errors","title":"\ud83d\udeab Adding Errors","text":"<p>You have two options for engaging the error handling mechanism:</p> <ul> <li> <p>Throw an exception from an input handler. The <code>HandleError</code> method will be called, which does nothing by default unless you override it.</p> </li> <li> <p>Call <code>AddError(Exception e)</code> from your state. This method also invokes <code>HandleError</code> and works well for non-critical errors if you don't automatically throw in the <code>HandleError</code> method.</p> </li> </ul> <p>How you handle errors is up to you.</p>"},{"location":"chickensoft/logic_blocks/04_basics/05_bindings/","title":"\ud83e\udea2 Bindings","text":"<p>LogicBlocks provides a binding system that allows objects to listen to a particular logic block. Bindings allow you to observe inputs, outputs, errors, and state changes declaratively.</p>"},{"location":"chickensoft/logic_blocks/04_basics/05_bindings/#observing-inputs","title":"\ud83d\udce5 Observing Inputs","text":"<pre><code>using var binding = logic.Bind();\n\nbinding.Watch((in MyLogicBlock.Input.SomeInput input) =&gt; {\n  // Watch for a particular input.\n});\n</code></pre>"},{"location":"chickensoft/logic_blocks/04_basics/05_bindings/#observing-outputs","title":"\ud83d\udce4 Observing Outputs","text":"<pre><code>using var binding = logic.Bind();\n\nbinding.Handle((in MyLogicBlock.Output.SomeOutput output) =&gt; {\n  // Handle a particular output.\n});\n</code></pre>"},{"location":"chickensoft/logic_blocks/04_basics/05_bindings/#observing-state-changes","title":"\ud83d\udd04 Observing State Changes","text":"<pre><code>using var binding = logic.Bind();\n\nbinding.When&lt;MyLogicBlock.State.SomeState&gt;(state =&gt; {\n  // Respond to a state change. This is only called when changing from a state\n  // that is not the type specified.\n});\n</code></pre>"},{"location":"chickensoft/logic_blocks/04_basics/05_bindings/#observing-errors","title":"\ud83d\udea8 Observing Errors","text":"<pre><code>using var binding = logic.Bind();\n\nbinding.Catch&lt;System.Exception&gt;(e =&gt; {\n  // Catch an error.\n});\n</code></pre>"},{"location":"chickensoft/logic_blocks/05_tutorial/","title":"\u23f2\ufe0f Timer Tutorial","text":"<p>In this tutorial, we'll use LogicBlocks to create a hierarchical state machine that represents a simple kitchen timer. When we're finished, we'll have code for a state machine that produces the following diagram.</p> <p>:::tip The final code for this project is available in the <code>Chickensoft.LogicBlocks.Tutorial</code> package at the LogicBlocks repository. :::</p> <pre><code>stateDiagram-v2\nstate \"Timer State\" as Chickensoft_LogicBlocks_Tests_Examples_Timer_State {\n  state \"PoweredOff\" as Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOff\n  state \"PoweredOn\" as Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn {\n    state \"Idle\" as Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Idle\n    state \"Countdown\" as Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Countdown\n    state \"Beeping\" as Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Beeping\n  }\n}\n\nChickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOff --&gt; Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Idle : PowerButtonPressed\nChickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn --&gt; Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOff : PowerButtonPressed\nChickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Countdown --&gt; Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Beeping : TimeElapsed\nChickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Countdown --&gt; Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Countdown : TimeElapsed\nChickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Countdown --&gt; Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Idle : StartStopButtonPressed\nChickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Idle --&gt; Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Countdown : StartStopButtonPressed\n\nChickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Beeping : OnEnter \u2192 PlayBeepingSound\nChickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOn_Beeping : OnExit \u2192 StopBeepingSound\n\n[*] --&gt; Chickensoft_LogicBlocks_Tests_Examples_Timer_State_PoweredOff\n</code></pre> <p>As you can see, even a simple kitchen timer contains a lot of details.</p> <p>Because LogicBlocks produces diagrams from our code, we can keep tweaking our code and checking the diagram until it matches our idea of how the state machine should be designed.</p>"},{"location":"chickensoft/logic_blocks/05_tutorial/01_timer_logic_block/","title":"\ud83e\uddca Timer Logic Block","text":"<p>To start off the tutorial, we'll start by making sure we have the right dependencies and then setup an empty logic block.</p> <p>:::caution This tutorial assumes a high degree of familiarity with state machines and C#. If you're new to either, you may wish to learn more about C# or read the basics on statecharts. :::</p>"},{"location":"chickensoft/logic_blocks/05_tutorial/01_timer_logic_block/#environment-setup","title":"\ud83d\udce6 Environment Setup","text":"<p>If you haven't already, make sure you've installed everything. You'll need LogicBlocks and the Chickensoft Introspection generator. Feel free to install the optional diagram generator so you can see your code as a state diagram.</p> <p>:::note The introspection generator produces information about types at build time, allowing logic blocks to know about all the possible states when it runs. If we don't use the introspection generator, we'd have to manually create and register every state manually. :::</p>"},{"location":"chickensoft/logic_blocks/05_tutorial/01_timer_logic_block/#creating-a-logic-block","title":"\ud83d\udcdd Creating a Logic Block","text":"<p>To define a logic block, we simply make a class that extends <code>LogicBlock&lt;TState&gt;</code>. By convention, we usually define our state inside the logic block itself as a nested type.</p> <p>:::tip If you don't define your state nested inside the logic block, the diagram generator won't be able to generate diagrams of your code since it won't know where to look to find your logic block's state. :::</p> <p>Let's go ahead and make an empty logic block for the timer.</p> <pre><code>using Chickensoft.Introspection;\n\n[Meta, LogicBlock(typeof(State), Diagram = true)]\npublic partial class Timer : LogicBlock&lt;Timer.State&gt; {\n  public override Transition GetInitialState() =&gt; To&lt;State.PoweredOff&gt;();\n\n  public static class Input;\n\n  public static class Output;\n\n  public abstract partial record State : StateLogic&lt;State&gt; {\n    public record PoweredOff : State;\n  }\n}\n</code></pre> <p>We've created an empty abstract base state, a starting state <code>PoweredOff</code>, and two empty static classes which will store our input and output types. We've also specified that our initial state should be <code>PoweredOff</code>.</p> <p>The <code>[Meta]</code> attribute tells the Chickensoft Introspection generator that we want to generate additional metadata about our logic block at build time by making it an introspective type. LogicBlocks is smart enough to know if it has been upgraded to an introspective type, and if it has, it will automatically identify the possible states and create them.</p> <p>:::note If you really don't want to use the introspection generator, you don't have to \u2014 but you'll have to register each state manually in the constructor. Here's what that would look like so far:</p> <pre><code>public Timer() {\n  Set(new PoweredOff()); // Do this for each possible state.\n}\n</code></pre> <p>For best results, just use the introspection generator: it prevents human error by protecting you against forgetting to register a state type, especially as you refactor your code and change up the state type hierarchy \u2014 a common occurrence when working with state machines. :::</p>"},{"location":"chickensoft/logic_blocks/05_tutorial/02_power/","title":"\ud83d\udd06 Power","text":"<p>We know we'll need a <code>PoweredOn</code> state, too. Whenever the user presses the power button, we should toggle between off and on.</p> <p>Fortunately, that's easy to do. We just create another state and an input for the power button being toggled.</p> <pre><code>[Meta, LogicBlock(typeof(State), Diagram = true)]\npublic partial class Timer : LogicBlock&lt;Timer.State&gt; {\n  public override Transition GetInitialState() =&gt; To&lt;State.PoweredOff&gt;();\n\n  public static class Input {\n    public readonly record struct PowerButtonPressed;\n  }\n\n  public static class Output;\n\n  public abstract record State : StateLogic&lt;State&gt; {\n\n    public record PoweredOff : State, IGet&lt;Input.PowerButtonPressed&gt; {\n      public Transition On(in Input.PowerButtonPressed input) =&gt;\n        To&lt;PoweredOn.Idle&gt;();\n    }\n\n    public abstract record PoweredOn : State, IGet&lt;Input.PowerButtonPressed&gt; {\n      public Transition On(in Input.PowerButtonPressed input) =&gt;\n        To&lt;PoweredOff&gt;();\n\n      public record Idle : PoweredOn;\n    }\n  }\n}\n</code></pre> <p>Whenever a state wants to handle a type of input, it simply implements the <code>IGet&lt;TInput&gt;</code> interface with the type of the input we're interested in. Then, you simply implement the <code>On(in TInput input)</code> method and return the transition to the next state.</p> <p>Transitions are defined with the <code>To&lt;TState&gt;()</code> method. If you don't want to transition to another state in an input handler, you can always return <code>ToSelf()</code>.</p> <p>The <code>PoweredOff</code> state now handles the <code>PowerButtonPressed</code> input and will go to the new <code>Idle</code> state, which inherits from <code>PoweredOn</code>.</p> <p>Likewise, the <code>PoweredOn</code> state also handles the same <code>PowerButtonPressed</code> input and will go to the <code>PoweredOff</code> state.</p>"},{"location":"chickensoft/logic_blocks/05_tutorial/02_power/#changing-the-timers-duration","title":"\u23f0 Changing the Timer's Duration","text":"<p>We know we want the user to specify how long the timer should run. That raises another question: where do we store the value?</p> <p>Well, we could always add a property to one of our states. But since LogicBlocks constructs states for us (something we'll appreciate more when we talk about serializing them), we don't really have a clean way of passing that data around.</p> <p>Instead, let's use the shared \u2728 blackboard \u2728. We'll create a new type that contains the values we'll need to share between states and put that on the blackboard. Since this data bucket is specific to our logic block, we'll go ahead and make it a nested type of the logic block, too.</p> <pre><code>[Meta, LogicBlock(typeof(State), Diagram = true)]\npublic partial class Timer : LogicBlock&lt;Timer.State&gt; {\n  public override Transition GetInitialState() =&gt; To&lt;State.PoweredOff&gt;();\n\n  public sealed record Data {\n    public double Duration { get; set; }\n    public double TimeRemaining { get; set; }\n  }\n\n  public Timer() {\n    // Set shared data for all states in the blackboard.\n    Set(new Data() { Duration = 30.0d });\n  }\n\n  ...\n</code></pre> <p>Now, whenever we create a new timer logic block, it'll add a new instance of the timer <code>Data</code> to the blackboard. Now all of our states can access the same data!</p> <p>Let's modify our <code>Idle</code> state to receive a new input, <code>ChangeDuration</code>. We'll add a property to <code>ChangeDuration</code> that specifies the new duration.</p> <pre><code>public static class Input {\n  public readonly record struct PowerButtonPressed;\n  public readonly record struct ChangeDuration(double Duration);\n}\n\npublic record Idle : PoweredOn, IGet&lt;Input.ChangeDuration&gt; {\n  public Transition On(in Input.ChangeDuration input) {\n    Get&lt;Data&gt;().Duration = input.Duration;\n    return ToSelf();\n  }\n}\n</code></pre> <p>All we do in the <code>ChangeDuration</code> input handler is update the <code>Duration</code> property on the shared <code>Data</code> object and remain in the same state. Simple!</p> <p>While we're at it, let's go ahead and add a new input, <code>StartStopButtonPressed</code> and make the <code>Idle</code> state transition to a new <code>Countdown</code> state when the user presses the start/stop button.</p> <pre><code>public static class Input {\n  public readonly record struct PowerButtonPressed;\n  public readonly record struct ChangeDuration(double Duration);\n  public readonly record struct StartStopButtonPressed;\n}\n\npublic record Idle : PoweredOn, IGet&lt;Input.StartStopButtonPressed&gt;, IGet&lt;Input.ChangeDuration&gt; {\n  public Transition On(in Input.ChangeDuration input) {\n    Get&lt;Data&gt;().Duration = input.Duration;\n    return ToSelf();\n  }\n\n  public Transition On(in Input.StartStopButtonPressed input) =&gt;\n    To&lt;Countdown&gt;();\n}\n</code></pre> <p>In the next part, we'll implement the <code>Countdown</code> state for our timer.</p>"},{"location":"chickensoft/logic_blocks/05_tutorial/03_coundown/","title":"\u23f3 Countdown","text":"<p>Now that our timer can be turned on, off, and set to a given duration, it's time to make it actually work.</p> <p>We could build the timer in a really simple fashion, but in the interest of actually learning something, let's pretend that our project has a clock service that exposes an event that informs us when a second has passed, roughly speaking.</p> <p>In this section, we'll make our new <code>Countdown</code> state subscribe to the clock service and respond to a new <code>TimeElapsed</code> input.</p> <p>First, let's define what the clock service looks like.</p> <pre><code>/// &lt;summary&gt;\n/// A service that announces the passage of time, roughly once per second.\n/// &lt;/summary&gt;\npublic interface IClock {\n  /// &lt;summary&gt;\n  /// Invoked about every second or so. Provides the time since the last\n  /// invocation (in seconds).\n  /// &lt;/summary&gt;\n  event Action&lt;double&gt; TimeElapsed;\n}\n</code></pre> <p>Easy enough. Let's make a new <code>Countdown</code> state. We can register attach and detach callbacks to subscribe to the clock service whenever the <code>Countdown</code> state becomes the active state, and unsubscribe when it is no longer the active state.</p> <pre><code>public static class Input {\n  public readonly record struct PowerButtonPressed;\n  public readonly record struct ChangeDuration(double Duration);\n  public readonly record struct StartStopButtonPressed;\n  public readonly record struct TimeElapsed(double Delta);\n}\n\npublic record Countdown : PoweredOn, IGet&lt;Input.TimeElapsed&gt;, IGet&lt;Input.StartStopButtonPressed&gt; {\n  public Countdown() {\n    OnAttach(() =&gt; Get&lt;IClock&gt;().TimeElapsed += OnTimeElapsed);\n    OnDetach(() =&gt; Get&lt;IClock&gt;().TimeElapsed -= OnTimeElapsed);\n  }\n\n  private void OnTimeElapsed(double delta) =&gt;\n    Input(new Input.TimeElapsed(delta));\n\n  public Transition On(in Input.TimeElapsed input) {\n    var data = Get&lt;Data&gt;();\n    data.TimeRemaining -= input.Delta;\n    return data.TimeRemaining &lt;= 0.0d ? To&lt;Beeping&gt;() : ToSelf();\n  }\n\n  public Transition On(in Input.StartStopButtonPressed input) =&gt; To&lt;Idle&gt;();\n}\n</code></pre> <p>We access the clock service through the blackboard when we're attaching/detaching so that we can subscribe and unsubscribe to it.</p> <p>We've also added a private method in <code>Countdown</code> that adds an input to the logic block whenever the clock invokes the <code>TimeElapsed</code> event.</p> <pre><code>private void OnTimeElapsed(double delta) =&gt;\n  Input(new Input.TimeElapsed(delta));\n</code></pre> <p>The <code>Input()</code> method allows us to add an input on the logic block we are attached to. Since we unsubscribe when we're detached, this method will only ever get called when the <code>Countdown</code> state is active.</p> <p>:::tip By subscribing to an event and adding an input to ourselves, we can force a state change to occur. This pattern of forcing state changes through subscriptions and inputs allows us to react to external events without creating a mess of our code. :::</p> <p>Finally, in our input handler for the <code>TimeElapsed</code> input that we add to ourselves whenever the clock we're subscribed to invokes its <code>TimeElapsed</code> event, we decrement the time remaining and transition to the <code>Beeping</code> state when the time runs out.</p> <p>We don't have a beeping state yet, so we'll go ahead and create one in the next section.</p>"},{"location":"chickensoft/logic_blocks/05_tutorial/04_beeping/","title":"\u23f0 Beeping","text":"<p>It's finally time to make the last (and best) part of our timer: the beeping state!</p> <p>Fortunately, this is really simple. We'll pretend that our timer is designed to be owned by something in the view layer of the application that can play sounds for us.</p> <p>We'll simply create outputs when the beeping state is entered and exited that tell anything binding to the logic block to play or stop a sound. We also want to handle the <code>StartStopButtonPressed</code> input to go back to the <code>Idle</code> state.</p> <pre><code>public static class Output {\n  public readonly record struct PlayBeepingSound;\n  public readonly record struct StopBeepingSound;\n}\n\npublic record Beeping : PoweredOn, IGet&lt;Input.StartStopButtonPressed&gt; {\n  public Beeping() {\n    this.OnEnter(() =&gt; Output(new Output.PlayBeepingSound()));\n    this.OnExit(() =&gt; Output(new Output.StopBeepingSound()));\n  }\n\n  public Transition On(in Input.StartStopButtonPressed input) =&gt;\n    To&lt;Idle&gt;();\n}\n</code></pre> <p>Outputs are just objects that are sent to the logic block's bindings. They can be used to communicate with anything that is interested in the logic block without the logic block states' having to know about them directly.</p> <p>We use the state's <code>this.OnEnter</code> and <code>this.OnExit</code> extension methods to define callbacks that should be invoked whenever the state is entered and exited, respectively. These entrance and exit callbacks are different than attach and detach callbacks since they are only invoked if the relevant portions of the type hierarchy changes. For more on that, see the \"Correct Hierarchical State Lifecycles\" section.</p> <p>Finally, we're done!</p> <p>Now the only thing that remains is to write tests (and of course you love writing tests, or else you wouldn't have read several pages on state management with hierarchical state machines \ud83e\udd20).</p>"},{"location":"chickensoft/logic_blocks/06_testing/","title":"\ud83e\uddea Testing","text":"<p>LogicBlocks was designed with testability in mind. States can be fully tested independently of the logic block they are used with.</p> <p>For the sake of clarity, we'll write tests based on the code we create in the tutorial. If you haven't read that yet, give it a quick once-over before continuing.</p> <p>The Chickensoft packages tend to use Moq for mocking and [Shouldly] for assertions, so we'll leverage those in the documentation, too.</p>"},{"location":"chickensoft/logic_blocks/06_testing/01_testing_logic_blocks/","title":"\ud83d\udca1 Testing Logic Blocks","text":"<p>LogicBlocks are mockable and testable.</p> <p>:::tip You can see plenty of test examples for the tutorial project in the <code>Chickensoft.LogicBlocks.Tutorial</code> package at the LogicBlocks repository. :::</p>"},{"location":"chickensoft/logic_blocks/06_testing/01_testing_logic_blocks/#mocking-a-logic-block","title":"\ud83e\udd78 Mocking a Logic Block","text":"<p>LogicBlocks implement the <code>ILogicBlock&lt;TState&gt;</code> interface, which makes them easy to mock.</p> <p>To make a logic block easily mockable, simply make it implement an interface.</p> <pre><code>public interface ITimer : ILogicBlock&lt;Timer.State&gt;;\n\n[Meta, LogicBlock(typeof(State), Diagram = true)]\npublic partial class Timer : LogicBlock&lt;Timer.State&gt;, ITimer {\n  public override Transition GetInitialState() =&gt; To&lt;State.PoweredOff&gt;();\n\n  ...\n}\n</code></pre> <p>Then, we can mock whatever logic block api's we need to when testing an object which uses a logic block.</p> <pre><code>using static Chickensoft.LogicBlocks.Tutorial.Timer;\n\nsealed record MyComponent(ITimer Timer) {\n  public void DoSomething() {\n    if (Timer.Value is State.PoweredOff) {\n      // Do something when the timer is off.\n    }\n  }\n}\n\npublic class MyComponentTest {\n  [Fact]\n  public void Mocks() {\n    var timer = new Mock&lt;ITimer&gt;();\n\n    // Make the mock logic block be in a specific state.\n    timer.Setup(t =&gt; t.Value).Returns(new State.PoweredOff());\n\n    var component = new MyComponent(timer.Object);\n    component.DoSomething();\n  }\n}\n</code></pre>"},{"location":"chickensoft/logic_blocks/06_testing/01_testing_logic_blocks/#testing-a-logic-block","title":"\ud83d\udd2c Testing a Logic Block","text":"<p>Logic blocks themselves don't usually have much to test, but you can still do it for the sake of completeness.</p> <pre><code>[Fact]\npublic void Initializes() {\n  // Mock dependencies that the logic block needs.\n  var clock = new Mock&lt;IClock&gt;();\n\n  // Create the real logic block.\n  var timer = new Timer();\n\n  // Add the mocked dependencies to the blackboard.\n  timer.Set(clock.Object);\n\n  // Check that the initial state is the one we expect.\n  var state = timer.GetInitialState()\n    .State\n    .ShouldBeOfType&lt;State.PoweredOff&gt;();\n\n  // Verify the timer has set its blackboard data correctly.\n  timer.Has&lt;Data&gt;().ShouldBeTrue();\n  timer.Get&lt;IClock&gt;().ShouldBe(clock.Object);\n}\n</code></pre>"},{"location":"chickensoft/logic_blocks/06_testing/02_testing_states/","title":"\ud83d\udd04 Testing States","text":"<p>Logic block states can easily be unit tested by themselves. To understand how to test a state, you need to know a little bit about its underlying context.</p>"},{"location":"chickensoft/logic_blocks/06_testing/02_testing_states/#understanding-the-context","title":"\ud83d\udd75\ufe0f Understanding the Context","text":"<p>Each logic block state has an internal <code>context</code> which wraps the logic block it is attached to.</p> <p>Behind the scenes, calling the state's <code>Input</code>, <code>Output</code>, <code>Get</code>, and <code>AddError</code> methods will manipulate the context (and by extent the logic block). Attempting to call those state methods when not attached to a logic block results in the state throwing an exception regarding an \"uninitialized context.\" This most commonly happens if you reference one of those methods in the state's constructor instead of in the relevant lifecycle callbacks, since the state is not attached at the time it is constructed.</p>"},{"location":"chickensoft/logic_blocks/06_testing/02_testing_states/#faking-the-context","title":"\ud83e\udd78 Faking the Context","text":"<p>LogicBlocks allows you to create a fake context for testing purposes. The fake context has its own blackboard, and allows you to collect inputs, outputs, and errors added by the state.</p> <pre><code>[Fact]\npublic void PlaysBeepingSoundOnEnter() {\n  var state = new Timer.State.PoweredOn.Beeping();\n\n  // Create a fake context for testing purposes.\n  var context = state.CreateFakeContext();\n\n  // Simulate the state being entered.\n  state.Enter();\n\n  // Verify that the state produced the outputs we expect.\n  context.Outputs.ShouldBe([new Timer.Output.PlayBeepingSound()]);\n}\n</code></pre> <p>You can also verify inputs and errors in the same way via <code>context.Inputs</code> and <code>context.Errors</code>.</p> <p>Here's another example where we add a dependency to the fake context's blackboard. This allows us to swap the dependencies a state uses during testing.</p> <pre><code>[Fact]\npublic void ChangesDuration() {\n  var state = new Timer.State.PoweredOn.Idle();\n\n  var context = state.CreateFakeContext();\n\n  // Put a value on the blackboard for the state to use.\n  context.Set(new Timer.Data() { Duration = 30.0d });\n\n  var duration = 45;\n\n  state.On(new Timer.Input.ChangeDuration(duration))\n    .State\n    .ShouldBeOfType&lt;Timer.State.PoweredOn.Idle&gt;();\n\n  context.Get&lt;Timer.Data&gt;().Duration.ShouldBe(duration);\n}\n</code></pre>"},{"location":"chickensoft/logic_blocks/06_testing/02_testing_states/#testing-entrance-and-exit","title":"\ud83d\udeaa Testing Entrance and Exit","text":"<p>Entrance and exit callbacks can be invoked manually by calling <code>Enter()</code> and <code>Exit()</code> on the state.</p> <pre><code>var context = state.CreateFakeContext();\n\n// Simulate the state being entered.\nstate.Enter();\n\n// Simulate the state being exited.\nstate.Exit();\n</code></pre> <p>Sometimes you only want to invoke entrance and exit callbacks that apply to a certain subsection of the state's type hierarchy to avoid simulating side effects (like outputs) outputted by its base classes.</p> <p>To accomplish this, pass in a parent state type. The parent state and its ancestor callbacks will be ignored, allowing you to simulate just the substate callbacks that you care about.</p> <pre><code>var state = new Timer.State.PoweredOn.Idle();\n\n// If PoweredOn had entrance callbacks, they wouldn't be run. This only runs\n// the entrance callbacks for Idle, if any.\nstate.Enter&lt;Timer.State.PoweredOn&gt;();\n// Same as above, but for exiting.\nstate.Exit&lt;Timer.State.PoweredOn&gt;();\n</code></pre> <p>:::info Passing in a parent state type is optional and usually only done when testing a state that's derived from another state that you have other unit tests for. :::</p>"},{"location":"chickensoft/logic_blocks/06_testing/02_testing_states/#testing-attachment","title":"\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc68 Testing Attachment","text":"<p>You can easily invoke a state's attach and detach callbacks by calling <code>Attach()</code> and <code>Detach()</code> on the state.</p> <pre><code>var state = new Timer.State.PoweredOn.Idle();\n\nvar context = state.CreateFakeContext();\n\n// Simulate the state being attached to a logic block.\nstate.Attach();\n\n// Simulate the state being detached from a logic block.\nstate.Detach();\n</code></pre>"},{"location":"chickensoft/logic_blocks/06_testing/03_testing_bindings/","title":"\ud83e\udea2 Testing Bindings","text":"<p>LogicBlocks allows you to create a fake binding for testing purposes.</p> <p>Make sure to create an interface for each logic block you want to test so that your logic block can be mocked.</p> <pre><code>public interface IMyLogicBlock : ILogicBlock&lt;MyLogicBlock.State&gt; { }\n\n[Meta, LogicBlock(typeof(State))]\npublic partial class MyLogicBlock : LogicBlock&lt;MyLogicBlock.State&gt;, IMyLogicBlock {\n  public record State : StateLogic&lt;State&gt; { ... }\n}\n</code></pre>"},{"location":"chickensoft/logic_blocks/06_testing/03_testing_bindings/#creating-fake-bindings","title":"\ud83e\udd78 Creating Fake Bindings","text":"<p>Fake bindings allow you to simulate adding inputs, producing outputs, adding errors, and making state changes.</p> <pre><code>var logic = new Mock&lt;MyLogicBlock&gt;();\n\n// CreateFakeBinding() is actually a static method on the logic block.\nvar binding = MyLogicBlock.CreateFakeBinding();\n\n// Make our mock logic block return the fake binding.\nlogic.Setup(logic =&gt; logic.Bind()).Returns(binding);\n</code></pre> <p>Then, you can use the binding to simulate the logic block's behavior.</p>"},{"location":"chickensoft/logic_blocks/06_testing/03_testing_bindings/#input-simulation","title":"\ud83d\udce5 Input Simulation","text":"<pre><code>var logic = new Mock&lt;IMyLogicBlock&gt;();\n\nvar binding = MyLogicBlock.CreateFakeBinding();\n\nlogic.Setup(logic =&gt; logic.Bind()).Returns(binding);\n\n// Simulate an input with our fake binding.\nbinding.Input(new MyLogicBlock.Input.SomeInput());\n</code></pre>"},{"location":"chickensoft/logic_blocks/06_testing/03_testing_bindings/#output-simulation","title":"\ud83d\udce4 Output Simulation","text":"<pre><code>var logic = new Mock&lt;IMyLogicBlock&gt;();\n\nvar binding = MyLogicBlock.CreateFakeBinding();\n\nlogic.Setup(logic =&gt; logic.Bind()).Returns(binding);\n\n// Simulate an input with our fake binding.\nbinding.Output(new MyLogicBlock.Output.SomeOutput());\n</code></pre>"},{"location":"chickensoft/logic_blocks/06_testing/03_testing_bindings/#error-simulation","title":"\ud83d\udea8 Error Simulation","text":"<pre><code>var logic = new Mock&lt;IMyLogicBlock&gt;();\n\nvar binding = MyLogicBlock.CreateFakeBinding();\n\nlogic.Setup(logic =&gt; logic.Bind()).Returns(binding);\n\n// Simulate an error with our fake binding.\nbinding.AddError(new InvalidOperationException());\n</code></pre>"},{"location":"chickensoft/logic_blocks/06_testing/03_testing_bindings/#state-change-simulation","title":"\ud83d\udd04 State Change Simulation","text":"<pre><code>var logic = new Mock&lt;IMyLogicBlock&gt;();\n\nvar binding = MyLogicBlock.CreateFakeBinding();\n\nlogic.Setup(logic =&gt; logic.Bind()).Returns(binding);\n\n// Simulate a state change with our fake binding.\nbinding.SetState(new MyLogicBlock.State.SomeOtherState());\n</code></pre>"}]}